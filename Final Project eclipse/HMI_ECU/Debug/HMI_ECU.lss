
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00002918  000029ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000f8  008000f8  00002a44  2**0
                  ALLOC
  3 .stab         00002604  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f79  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006101  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006271  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a70f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "lcd.h"
#include "uart.h"
#include <avr/io.h>

void main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2a 97       	sbiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* UART configuration pointer */
	UART_ConfigType U_Config_Ptr={EIGHT_BIT , DISABLE_PARITY , ONE_STOP_BIT , BAUD9600};
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	9f 83       	std	Y+7, r25	; 0x07
     b60:	8e 83       	std	Y+6, r24	; 0x06
     b62:	e3 ef       	ldi	r30, 0xF3	; 243
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	f9 87       	std	Y+9, r31	; 0x09
     b68:	e8 87       	std	Y+8, r30	; 0x08
     b6a:	f5 e0       	ldi	r31, 0x05	; 5
     b6c:	fa 87       	std	Y+10, r31	; 0x0a
     b6e:	e8 85       	ldd	r30, Y+8	; 0x08
     b70:	f9 85       	ldd	r31, Y+9	; 0x09
     b72:	00 80       	ld	r0, Z
     b74:	88 85       	ldd	r24, Y+8	; 0x08
     b76:	99 85       	ldd	r25, Y+9	; 0x09
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	99 87       	std	Y+9, r25	; 0x09
     b7c:	88 87       	std	Y+8, r24	; 0x08
     b7e:	ee 81       	ldd	r30, Y+6	; 0x06
     b80:	ff 81       	ldd	r31, Y+7	; 0x07
     b82:	00 82       	st	Z, r0
     b84:	8e 81       	ldd	r24, Y+6	; 0x06
     b86:	9f 81       	ldd	r25, Y+7	; 0x07
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9f 83       	std	Y+7, r25	; 0x07
     b8c:	8e 83       	std	Y+6, r24	; 0x06
     b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9a 87       	std	Y+10, r25	; 0x0a
     b94:	ea 85       	ldd	r30, Y+10	; 0x0a
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>

	/*Setup UART */
	UART_init(&U_Config_Ptr);
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_init>

	/*Setup LCD */
	LCD_init();
     ba2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_init>

	for(;;)
	{
		/* Create system password */
		CREAT_pass();
     ba6:	0e 94 16 09 	call	0x122c	; 0x122c <CREAT_pass>
		/* Display main option */
		MAIN_option();
     baa:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MAIN_option>
     bae:	fb cf       	rjmp	.-10     	; 0xba6 <main+0x60>

00000bb0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <GPIO_setupPinDirection+0x6>
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <GPIO_setupPinDirection+0x8>
     bb8:	0f 92       	push	r0
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	6a 83       	std	Y+2, r22	; 0x02
     bc2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	88 30       	cpi	r24, 0x08	; 8
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <GPIO_setupPinDirection+0x1c>
     bca:	d5 c0       	rjmp	.+426    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <GPIO_setupPinDirection+0x24>
     bd2:	d1 c0       	rjmp	.+418    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	3d 83       	std	Y+5, r19	; 0x05
     bdc:	2c 83       	std	Y+4, r18	; 0x04
     bde:	8c 81       	ldd	r24, Y+4	; 0x04
     be0:	9d 81       	ldd	r25, Y+5	; 0x05
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <GPIO_setupPinDirection+0x3a>
     be8:	43 c0       	rjmp	.+134    	; 0xc70 <GPIO_setupPinDirection+0xc0>
     bea:	2c 81       	ldd	r18, Y+4	; 0x04
     bec:	3d 81       	ldd	r19, Y+5	; 0x05
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	2c f4       	brge	.+10     	; 0xbfe <GPIO_setupPinDirection+0x4e>
     bf4:	8c 81       	ldd	r24, Y+4	; 0x04
     bf6:	9d 81       	ldd	r25, Y+5	; 0x05
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	71 f0       	breq	.+28     	; 0xc18 <GPIO_setupPinDirection+0x68>
     bfc:	bc c0       	rjmp	.+376    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
     bfe:	2c 81       	ldd	r18, Y+4	; 0x04
     c00:	3d 81       	ldd	r19, Y+5	; 0x05
     c02:	22 30       	cpi	r18, 0x02	; 2
     c04:	31 05       	cpc	r19, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <GPIO_setupPinDirection+0x5a>
     c08:	5f c0       	rjmp	.+190    	; 0xcc8 <GPIO_setupPinDirection+0x118>
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
     c0c:	9d 81       	ldd	r25, Y+5	; 0x05
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	91 05       	cpc	r25, r1
     c12:	09 f4       	brne	.+2      	; 0xc16 <GPIO_setupPinDirection+0x66>
     c14:	85 c0       	rjmp	.+266    	; 0xd20 <GPIO_setupPinDirection+0x170>
     c16:	af c0       	rjmp	.+350    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	a1 f4       	brne	.+40     	; 0xc46 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c1e:	aa e3       	ldi	r26, 0x3A	; 58
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	ea e3       	ldi	r30, 0x3A	; 58
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <GPIO_setupPinDirection+0x8c>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <GPIO_setupPinDirection+0x88>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	98 c0       	rjmp	.+304    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c46:	aa e3       	ldi	r26, 0x3A	; 58
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	ea e3       	ldi	r30, 0x3A	; 58
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	48 2f       	mov	r20, r24
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <GPIO_setupPinDirection+0xb4>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <GPIO_setupPinDirection+0xb0>
     c68:	80 95       	com	r24
     c6a:	84 23       	and	r24, r20
     c6c:	8c 93       	st	X, r24
     c6e:	83 c0       	rjmp	.+262    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	a1 f4       	brne	.+40     	; 0xc9e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c76:	a7 e3       	ldi	r26, 0x37	; 55
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e7 e3       	ldi	r30, 0x37	; 55
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	48 2f       	mov	r20, r24
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 2e       	mov	r0, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <GPIO_setupPinDirection+0xe4>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	0a 94       	dec	r0
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <GPIO_setupPinDirection+0xe0>
     c98:	84 2b       	or	r24, r20
     c9a:	8c 93       	st	X, r24
     c9c:	6c c0       	rjmp	.+216    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c9e:	a7 e3       	ldi	r26, 0x37	; 55
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e7 e3       	ldi	r30, 0x37	; 55
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <GPIO_setupPinDirection+0x10c>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <GPIO_setupPinDirection+0x108>
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	57 c0       	rjmp	.+174    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	a1 f4       	brne	.+40     	; 0xcf6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     cce:	a4 e3       	ldi	r26, 0x34	; 52
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e4 e3       	ldi	r30, 0x34	; 52
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <GPIO_setupPinDirection+0x13c>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <GPIO_setupPinDirection+0x138>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	40 c0       	rjmp	.+128    	; 0xd76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <GPIO_setupPinDirection+0x164>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <GPIO_setupPinDirection+0x160>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	2b c0       	rjmp	.+86     	; 0xd76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	a1 f4       	brne	.+40     	; 0xd4e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d26:	a1 e3       	ldi	r26, 0x31	; 49
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e1 e3       	ldi	r30, 0x31	; 49
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <GPIO_setupPinDirection+0x194>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <GPIO_setupPinDirection+0x190>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	14 c0       	rjmp	.+40     	; 0xd76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d4e:	a1 e3       	ldi	r26, 0x31	; 49
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e1 e3       	ldi	r30, 0x31	; 49
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <GPIO_setupPinDirection+0x1bc>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <GPIO_setupPinDirection+0x1b8>
     d70:	80 95       	com	r24
     d72:	84 23       	and	r24, r20
     d74:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <GPIO_writePin+0x6>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <GPIO_writePin+0x8>
     d8e:	0f 92       	push	r0
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	6a 83       	std	Y+2, r22	; 0x02
     d98:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <GPIO_writePin+0x1c>
     da0:	d5 c0       	rjmp	.+426    	; 0xf4c <GPIO_writePin+0x1c6>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	84 30       	cpi	r24, 0x04	; 4
     da6:	08 f0       	brcs	.+2      	; 0xdaa <GPIO_writePin+0x24>
     da8:	d1 c0       	rjmp	.+418    	; 0xf4c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3d 83       	std	Y+5, r19	; 0x05
     db2:	2c 83       	std	Y+4, r18	; 0x04
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <GPIO_writePin+0x3a>
     dbe:	43 c0       	rjmp	.+134    	; 0xe46 <GPIO_writePin+0xc0>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <GPIO_writePin+0x4e>
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	71 f0       	breq	.+28     	; 0xdee <GPIO_writePin+0x68>
     dd2:	bc c0       	rjmp	.+376    	; 0xf4c <GPIO_writePin+0x1c6>
     dd4:	2c 81       	ldd	r18, Y+4	; 0x04
     dd6:	3d 81       	ldd	r19, Y+5	; 0x05
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	09 f4       	brne	.+2      	; 0xde0 <GPIO_writePin+0x5a>
     dde:	5f c0       	rjmp	.+190    	; 0xe9e <GPIO_writePin+0x118>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	9d 81       	ldd	r25, Y+5	; 0x05
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <GPIO_writePin+0x66>
     dea:	85 c0       	rjmp	.+266    	; 0xef6 <GPIO_writePin+0x170>
     dec:	af c0       	rjmp	.+350    	; 0xf4c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	a1 f4       	brne	.+40     	; 0xe1c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     df4:	ab e3       	ldi	r26, 0x3B	; 59
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	eb e3       	ldi	r30, 0x3B	; 59
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <GPIO_writePin+0x8c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <GPIO_writePin+0x88>
     e16:	84 2b       	or	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	98 c0       	rjmp	.+304    	; 0xf4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     e1c:	ab e3       	ldi	r26, 0x3B	; 59
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e3       	ldi	r30, 0x3B	; 59
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <GPIO_writePin+0xb4>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <GPIO_writePin+0xb0>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	83 c0       	rjmp	.+262    	; 0xf4c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	a1 f4       	brne	.+40     	; 0xe74 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     e4c:	a8 e3       	ldi	r26, 0x38	; 56
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e8 e3       	ldi	r30, 0x38	; 56
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <GPIO_writePin+0xe4>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <GPIO_writePin+0xe0>
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	6c c0       	rjmp	.+216    	; 0xf4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e74:	a8 e3       	ldi	r26, 0x38	; 56
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e3       	ldi	r30, 0x38	; 56
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_writePin+0x10c>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_writePin+0x108>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	57 c0       	rjmp	.+174    	; 0xf4c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	a1 f4       	brne	.+40     	; 0xecc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     ea4:	a5 e3       	ldi	r26, 0x35	; 53
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e5 e3       	ldi	r30, 0x35	; 53
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <GPIO_writePin+0x13c>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <GPIO_writePin+0x138>
     ec6:	84 2b       	or	r24, r20
     ec8:	8c 93       	st	X, r24
     eca:	40 c0       	rjmp	.+128    	; 0xf4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     ecc:	a5 e3       	ldi	r26, 0x35	; 53
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e3       	ldi	r30, 0x35	; 53
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <GPIO_writePin+0x164>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <GPIO_writePin+0x160>
     eee:	80 95       	com	r24
     ef0:	84 23       	and	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	2b c0       	rjmp	.+86     	; 0xf4c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	a1 f4       	brne	.+40     	; 0xf24 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     efc:	a2 e3       	ldi	r26, 0x32	; 50
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e2 e3       	ldi	r30, 0x32	; 50
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_writePin+0x194>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_writePin+0x190>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f24:	a2 e3       	ldi	r26, 0x32	; 50
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e2 e3       	ldi	r30, 0x32	; 50
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <GPIO_writePin+0x1bc>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <GPIO_writePin+0x1b8>
     f46:	80 95       	com	r24
     f48:	84 23       	and	r24, r20
     f4a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <GPIO_readPin+0x6>
     f62:	00 d0       	rcall	.+0      	; 0xf64 <GPIO_readPin+0x8>
     f64:	0f 92       	push	r0
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f6e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	88 30       	cpi	r24, 0x08	; 8
     f74:	08 f0       	brcs	.+2      	; 0xf78 <GPIO_readPin+0x1c>
     f76:	84 c0       	rjmp	.+264    	; 0x1080 <GPIO_readPin+0x124>
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <GPIO_readPin+0x24>
     f7e:	80 c0       	rjmp	.+256    	; 0x1080 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	3d 83       	std	Y+5, r19	; 0x05
     f88:	2c 83       	std	Y+4, r18	; 0x04
     f8a:	4c 81       	ldd	r20, Y+4	; 0x04
     f8c:	5d 81       	ldd	r21, Y+5	; 0x05
     f8e:	41 30       	cpi	r20, 0x01	; 1
     f90:	51 05       	cpc	r21, r1
     f92:	79 f1       	breq	.+94     	; 0xff2 <GPIO_readPin+0x96>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	91 05       	cpc	r25, r1
     f9c:	34 f4       	brge	.+12     	; 0xfaa <GPIO_readPin+0x4e>
     f9e:	2c 81       	ldd	r18, Y+4	; 0x04
     fa0:	3d 81       	ldd	r19, Y+5	; 0x05
     fa2:	21 15       	cp	r18, r1
     fa4:	31 05       	cpc	r19, r1
     fa6:	69 f0       	breq	.+26     	; 0xfc2 <GPIO_readPin+0x66>
     fa8:	6b c0       	rjmp	.+214    	; 0x1080 <GPIO_readPin+0x124>
     faa:	4c 81       	ldd	r20, Y+4	; 0x04
     fac:	5d 81       	ldd	r21, Y+5	; 0x05
     fae:	42 30       	cpi	r20, 0x02	; 2
     fb0:	51 05       	cpc	r21, r1
     fb2:	b9 f1       	breq	.+110    	; 0x1022 <GPIO_readPin+0xc6>
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	91 05       	cpc	r25, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <GPIO_readPin+0x64>
     fbe:	49 c0       	rjmp	.+146    	; 0x1052 <GPIO_readPin+0xf6>
     fc0:	5f c0       	rjmp	.+190    	; 0x1080 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     fc2:	e9 e3       	ldi	r30, 0x39	; 57
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a9 01       	movw	r20, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_readPin+0x7e>
     fd6:	55 95       	asr	r21
     fd8:	47 95       	ror	r20
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_readPin+0x7a>
     fde:	ca 01       	movw	r24, r20
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	88 23       	and	r24, r24
     fe6:	19 f0       	breq	.+6      	; 0xfee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	49 c0       	rjmp	.+146    	; 0x1080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	47 c0       	rjmp	.+142    	; 0x1080 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     ff2:	e6 e3       	ldi	r30, 0x36	; 54
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_readPin+0xae>
    1006:	55 95       	asr	r21
    1008:	47 95       	ror	r20
    100a:	8a 95       	dec	r24
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_readPin+0xaa>
    100e:	ca 01       	movw	r24, r20
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	88 23       	and	r24, r24
    1016:	19 f0       	breq	.+6      	; 0x101e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	31 c0       	rjmp	.+98     	; 0x1080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	2f c0       	rjmp	.+94     	; 0x1080 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1022:	e3 e3       	ldi	r30, 0x33	; 51
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_readPin+0xde>
    1036:	55 95       	asr	r21
    1038:	47 95       	ror	r20
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_readPin+0xda>
    103e:	ca 01       	movw	r24, r20
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	88 23       	and	r24, r24
    1046:	19 f0       	breq	.+6      	; 0x104e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	19 c0       	rjmp	.+50     	; 0x1080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    104e:	19 82       	std	Y+1, r1	; 0x01
    1050:	17 c0       	rjmp	.+46     	; 0x1080 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1052:	e0 e3       	ldi	r30, 0x30	; 48
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <GPIO_readPin+0x10e>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <GPIO_readPin+0x10a>
    106e:	ca 01       	movw	r24, r20
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	90 70       	andi	r25, 0x00	; 0
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    107e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_setupPortDirection+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <GPIO_setupPortDirection+0x8>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	90 f5       	brcc	.+100    	; 0x110c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3c 83       	std	Y+4, r19	; 0x04
    10b0:	2b 83       	std	Y+3, r18	; 0x03
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	d1 f0       	breq	.+52     	; 0x10f0 <GPIO_setupPortDirection+0x5e>
    10bc:	2b 81       	ldd	r18, Y+3	; 0x03
    10be:	3c 81       	ldd	r19, Y+4	; 0x04
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <GPIO_setupPortDirection+0x3e>
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <GPIO_setupPortDirection+0x54>
    10ce:	1e c0       	rjmp	.+60     	; 0x110c <GPIO_setupPortDirection+0x7a>
    10d0:	2b 81       	ldd	r18, Y+3	; 0x03
    10d2:	3c 81       	ldd	r19, Y+4	; 0x04
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <GPIO_setupPortDirection+0x68>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	81 f0       	breq	.+32     	; 0x1104 <GPIO_setupPortDirection+0x72>
    10e4:	13 c0       	rjmp	.+38     	; 0x110c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	80 83       	st	Z, r24
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10f0:	e7 e3       	ldi	r30, 0x37	; 55
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 83       	st	Z, r24
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10fa:	e4 e3       	ldi	r30, 0x34	; 52
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	80 83       	st	Z, r24
    1102:	04 c0       	rjmp	.+8      	; 0x110c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1104:	e1 e3       	ldi	r30, 0x31	; 49
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
			break;
		}
	}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_writePort+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_writePort+0x8>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	90 f5       	brcc	.+100    	; 0x1194 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3c 83       	std	Y+4, r19	; 0x04
    1138:	2b 83       	std	Y+3, r18	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	d1 f0       	breq	.+52     	; 0x1178 <GPIO_writePort+0x5e>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <GPIO_writePort+0x3e>
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 f0       	breq	.+24     	; 0x116e <GPIO_writePort+0x54>
    1156:	1e c0       	rjmp	.+60     	; 0x1194 <GPIO_writePort+0x7a>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	81 f0       	breq	.+32     	; 0x1182 <GPIO_writePort+0x68>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <GPIO_writePort+0x72>
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1178:	e8 e3       	ldi	r30, 0x38	; 56
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1182:	e5 e3       	ldi	r30, 0x35	; 53
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
			break;
		}
	}
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <GPIO_readPort+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <GPIO_readPort+0x8>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    11b0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	90 f5       	brcc	.+100    	; 0x121c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3c 83       	std	Y+4, r19	; 0x04
    11c0:	2b 83       	std	Y+3, r18	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	d1 f0       	breq	.+52     	; 0x1200 <GPIO_readPort+0x5e>
    11cc:	2b 81       	ldd	r18, Y+3	; 0x03
    11ce:	3c 81       	ldd	r19, Y+4	; 0x04
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <GPIO_readPort+0x3e>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <GPIO_readPort+0x54>
    11de:	1e c0       	rjmp	.+60     	; 0x121c <GPIO_readPort+0x7a>
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	3c 81       	ldd	r19, Y+4	; 0x04
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	81 f0       	breq	.+32     	; 0x120a <GPIO_readPort+0x68>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <GPIO_readPort+0x72>
    11f4:	13 c0       	rjmp	.+38     	; 0x121c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    11f6:	e9 e3       	ldi	r30, 0x39	; 57
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1200:	e6 e3       	ldi	r30, 0x36	; 54
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	09 c0       	rjmp	.+18     	; 0x121c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    120a:	e3 e3       	ldi	r30, 0x33	; 51
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	04 c0       	rjmp	.+8      	; 0x121c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1214:	e0 e3       	ldi	r30, 0x30	; 48
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <CREAT_pass>:
/* Function responsible for
 * sending created and confirm password
 * to Control_ECU
 */
void  CREAT_pass(void)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	2e 97       	sbiw	r28, 0x0e	; 14
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
	 *                               STEP 1                                        *
	 *******************************************************************************/
	/* Create a System Password */

	/* Clear screen from last display */
	LCD_clearScreen();
    1240:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass: ");
    1244:	20 e6       	ldi	r18, 0x60	; 96
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0); /* Move the cursor to the second row */
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	0e 94 4f 12 	call	0x249e	; 0x249e <LCD_moveCursor>

	ENTER_pass(g_Password); /* Create password */
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <ENTER_pass>



	/* Clear screen from last display */
	LCD_clearScreen();
    1262:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz re-enter the");
    1266:	21 e7       	ldi	r18, 0x71	; 113
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	a9 01       	movw	r20, r18
    1270:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "same Pass:");
    1274:	22 e8       	ldi	r18, 0x82	; 130
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,11);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	6b e0       	ldi	r22, 0x0B	; 11
    1286:	0e 94 4f 12 	call	0x249e	; 0x249e <LCD_moveCursor>

	/* Confirm Password */
	ENTER_pass(g_re_Password);
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <ENTER_pass>
	 * If compare result for two password
	 * which received from Control_ECU
	 * are matched display options for user
	 * if not creat password again
	 */
	if(UART_recieveByte() == PASS_IS_MATCHED)
    1292:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	09 f0       	breq	.+2      	; 0x129c <CREAT_pass+0x70>
    129a:	87 c0       	rjmp	.+270    	; 0x13aa <CREAT_pass+0x17e>
		/*******************************************************************************
		 *                               STEP 2                                        *
		 *******************************************************************************/
		/*Main Options*/

		LCD_clearScreen();
    129c:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    12a0:	2d e8       	ldi	r18, 0x8D	; 141
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change pass");
    12ae:	2b e9       	ldi	r18, 0x9B	; 155
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
		g_key=KEYPAD_getPressedKey() ;
    12bc:	0e 94 16 0c 	call	0x182c	; 0x182c <KEYPAD_getPressedKey>
    12c0:	80 93 f8 00 	sts	0x00F8, r24
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a6 e9       	ldi	r26, 0x96	; 150
    12ca:	b3 e4       	ldi	r27, 0x43	; 67
    12cc:	8b 87       	std	Y+11, r24	; 0x0b
    12ce:	9c 87       	std	Y+12, r25	; 0x0c
    12d0:	ad 87       	std	Y+13, r26	; 0x0d
    12d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12da:	9e 85       	ldd	r25, Y+14	; 0x0e
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a ef       	ldi	r20, 0xFA	; 250
    12e2:	54 e4       	ldi	r21, 0x44	; 68
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	8f 83       	std	Y+7, r24	; 0x07
    12ee:	98 87       	std	Y+8, r25	; 0x08
    12f0:	a9 87       	std	Y+9, r26	; 0x09
    12f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f4:	6f 81       	ldd	r22, Y+7	; 0x07
    12f6:	78 85       	ldd	r23, Y+8	; 0x08
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	2c f4       	brge	.+10     	; 0x1316 <CREAT_pass+0xea>
		__ticks = 1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	3f c0       	rjmp	.+126    	; 0x1394 <CREAT_pass+0x168>
	else if (__tmp > 65535)
    1316:	6f 81       	ldd	r22, Y+7	; 0x07
    1318:	78 85       	ldd	r23, Y+8	; 0x08
    131a:	89 85       	ldd	r24, Y+9	; 0x09
    131c:	9a 85       	ldd	r25, Y+10	; 0x0a
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	3f ef       	ldi	r19, 0xFF	; 255
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	57 e4       	ldi	r21, 0x47	; 71
    1326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132a:	18 16       	cp	r1, r24
    132c:	4c f5       	brge	.+82     	; 0x1380 <CREAT_pass+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1330:	7c 85       	ldd	r23, Y+12	; 0x0c
    1332:	8d 85       	ldd	r24, Y+13	; 0x0d
    1334:	9e 85       	ldd	r25, Y+14	; 0x0e
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e2       	ldi	r20, 0x20	; 32
    133c:	51 e4       	ldi	r21, 0x41	; 65
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <CREAT_pass+0x14a>
    1358:	88 ec       	ldi	r24, 0xC8	; 200
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9c 83       	std	Y+4, r25	; 0x04
    135e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <CREAT_pass+0x138>
    1368:	9c 83       	std	Y+4, r25	; 0x04
    136a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	9e 83       	std	Y+6, r25	; 0x06
    1374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f7       	brne	.-38     	; 0x1358 <CREAT_pass+0x12c>
    137e:	17 c0       	rjmp	.+46     	; 0x13ae <CREAT_pass+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1380:	6f 81       	ldd	r22, Y+7	; 0x07
    1382:	78 85       	ldd	r23, Y+8	; 0x08
    1384:	89 85       	ldd	r24, Y+9	; 0x09
    1386:	9a 85       	ldd	r25, Y+10	; 0x0a
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 83       	std	Y+5, r24	; 0x05
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <CREAT_pass+0x174>
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <CREAT_pass+0x182>
		_delay_ms(300);
	}
	else
	{
		CREAT_pass();
    13aa:	0e 94 16 09 	call	0x122c	; 0x122c <CREAT_pass>
	}

}
    13ae:	2e 96       	adiw	r28, 0x0e	; 14
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <MAIN_option>:
/* Function responsible for
 * sending user option
 * to Control_ECU
 */
void MAIN_option(void)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	static uint8  trail=0;

	if(g_key == '+')
    13c8:	80 91 f8 00 	lds	r24, 0x00F8
    13cc:	8b 32       	cpi	r24, 0x2B	; 43
    13ce:	a9 f5       	brne	.+106    	; 0x143a <MAIN_option+0x7a>
		/*******************************************************************************
		 *                               STEP 3                                        *
		 *******************************************************************************/
		/*Open Door */

		LCD_clearScreen();
    13d0:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
    13d4:	2b ea       	ldi	r18, 0xAB	; 171
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	0e 94 4f 12 	call	0x249e	; 0x249e <LCD_moveCursor>

		/* Enter password must match to created password */
		ENTER_pass(g_Pass_Entered);
    13ea:	8a ef       	ldi	r24, 0xFA	; 250
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 cb 0a 	call	0x1596	; 0x1596 <ENTER_pass>
		 * which received from Control_ECU
		 * are matched open the door
		 * if not enter password again for two trail
		 * and hold the system for 1 minute for third trail
		 */
		if(UART_recieveByte() == PASS_IS_MATCHED)
    13f2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	29 f4       	brne	.+10     	; 0x1404 <MAIN_option+0x44>
		{
			OPEN_door();
    13fa:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OPEN_door>
			MAIN_option();
    13fe:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MAIN_option>
    1402:	58 c0       	rjmp	.+176    	; 0x14b4 <MAIN_option+0xf4>
		}
		else
		{
			trail++;
    1404:	80 91 f9 00 	lds	r24, 0x00F9
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	80 93 f9 00 	sts	0x00F9, r24
			if(trail<3)
    140e:	80 91 f9 00 	lds	r24, 0x00F9
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	30 f4       	brcc	.+12     	; 0x1422 <MAIN_option+0x62>
			{
				g_key = '+';
    1416:	8b e2       	ldi	r24, 0x2B	; 43
    1418:	80 93 f8 00 	sts	0x00F8, r24
				MAIN_option();
    141c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MAIN_option>
    1420:	49 c0       	rjmp	.+146    	; 0x14b4 <MAIN_option+0xf4>
			}
			else if(trail==MAX_TRAIL)
    1422:	80 91 f9 00 	lds	r24, 0x00F9
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	09 f0       	breq	.+2      	; 0x142c <MAIN_option+0x6c>
    142a:	44 c0       	rjmp	.+136    	; 0x14b4 <MAIN_option+0xf4>
			{
				trail=0;
    142c:	10 92 f9 00 	sts	0x00F9, r1
				WRONG_PASS_ERROR();
    1430:	0e 94 a2 0a 	call	0x1544	; 0x1544 <WRONG_PASS_ERROR>
				MAIN_option();
    1434:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MAIN_option>
    1438:	3d c0       	rjmp	.+122    	; 0x14b4 <MAIN_option+0xf4>
	/*******************************************************************************
	 *                               STEP 4                                        *
	 *******************************************************************************/
	/* Change Password*/

	else if(g_key == '-')
    143a:	80 91 f8 00 	lds	r24, 0x00F8
    143e:	8d 32       	cpi	r24, 0x2D	; 45
    1440:	c9 f5       	brne	.+114    	; 0x14b4 <MAIN_option+0xf4>
	{


		LCD_clearScreen();
    1442:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
    1446:	2b ea       	ldi	r18, 0xAB	; 171
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	a9 01       	movw	r20, r18
    1450:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	0e 94 4f 12 	call	0x249e	; 0x249e <LCD_moveCursor>

		/* Enter password must match to created password */
		ENTER_pass(g_Pass_Entered);
    145c:	8a ef       	ldi	r24, 0xFA	; 250
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 cb 0a 	call	0x1596	; 0x1596 <ENTER_pass>
		 * which received from Control_ECU
		 * are matched change password
		 * if not enter password again for two trail
		 * and hold the system for 1 minute for third trail
		 */
		if(UART_recieveByte() == PASS_IS_MATCHED)
    1464:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	59 f4       	brne	.+22     	; 0x1482 <MAIN_option+0xc2>
		{
			UART_sendByte(HMI_ECU_READY);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>

			UART_sendByte(CHANGE_PASS);
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>

			CREAT_pass();
    1478:	0e 94 16 09 	call	0x122c	; 0x122c <CREAT_pass>
			MAIN_option();
    147c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MAIN_option>
    1480:	19 c0       	rjmp	.+50     	; 0x14b4 <MAIN_option+0xf4>
		 *                               STEP 5                                        *
		 *******************************************************************************/
		/* If created password not match with enterd password*/
		else
		{
			trail++;
    1482:	80 91 f9 00 	lds	r24, 0x00F9
    1486:	8f 5f       	subi	r24, 0xFF	; 255
    1488:	80 93 f9 00 	sts	0x00F9, r24
			if(trail<3)
    148c:	80 91 f9 00 	lds	r24, 0x00F9
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	30 f4       	brcc	.+12     	; 0x14a0 <MAIN_option+0xe0>
			{
				g_key = '-';
    1494:	8d e2       	ldi	r24, 0x2D	; 45
    1496:	80 93 f8 00 	sts	0x00F8, r24
				MAIN_option();
    149a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MAIN_option>
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <MAIN_option+0xf4>

			}
			else if(trail==MAX_TRAIL)
    14a0:	80 91 f9 00 	lds	r24, 0x00F9
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	31 f4       	brne	.+12     	; 0x14b4 <MAIN_option+0xf4>
			{
				trail=0;
    14a8:	10 92 f9 00 	sts	0x00F9, r1
				WRONG_PASS_ERROR();
    14ac:	0e 94 a2 0a 	call	0x1544	; 0x1544 <WRONG_PASS_ERROR>
				MAIN_option();
    14b0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MAIN_option>

		}

	}

}
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <OPEN_door>:
 * Function responsible for
 * open door if user want and
 * entered right password
 */
void OPEN_door(void)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>

	/* Ask Control_ECU to open door*/
	UART_sendByte(OPEN_DOOR);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>


	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
	/* Wait until Control_ECU open door*/
	while(UART_recieveByte()!=OPEN_DOOR);
    14d4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <OPEN_door+0x1a>
	/* Display door state in LCD */
	LCD_clearScreen();
    14dc:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,"DoorIs Unlocking");
    14e0:	2b eb       	ldi	r18, 0xBB	; 187
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>


	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
	/* Wait until Control_ECU lock door*/
	while(UART_recieveByte()!=LOCK_DOOR);
    14f4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	e1 f7       	brne	.-8      	; 0x14f4 <OPEN_door+0x3a>
	/* Display door state in LCD */
	LCD_clearScreen();
    14fc:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,"Door is locking");
    1500:	2c ec       	ldi	r18, 0xCC	; 204
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>

	while(UART_recieveByte()!=RESTART);
    150e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	e1 f7       	brne	.-8      	; 0x150e <OPEN_door+0x54>

	/* Return to main option */
	LCD_clearScreen();
    1516:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    151a:	2d e8       	ldi	r18, 0x8D	; 141
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change pass");
    1528:	2b e9       	ldi	r18, 0x9B	; 155
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
	g_key=KEYPAD_getPressedKey() ;
    1536:	0e 94 16 0c 	call	0x182c	; 0x182c <KEYPAD_getPressedKey>
    153a:	80 93 f8 00 	sts	0x00F8, r24
}
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <WRONG_PASS_ERROR>:
 * Function responsible for
 * hold the system for 1 minute
 * if user entered wrong password for three times
 */
void WRONG_PASS_ERROR(void)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until Control_ECU  to send error password for third trail */
	while(UART_recieveByte()!=ERROR_PASS);
    154c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    1550:	8a 30       	cpi	r24, 0x0A	; 10
    1552:	e1 f7       	brne	.-8      	; 0x154c <WRONG_PASS_ERROR+0x8>
	/* Display error in LCD */
	LCD_clearScreen();
    1554:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
	LCD_displayString("Error Password");
    1558:	8c ed       	ldi	r24, 0xDC	; 220
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 26 12 	call	0x244c	; 0x244c <LCD_displayString>

	/* Wait until Control_ECU restart the system*/
	while(UART_recieveByte()!=RESTART);
    1560:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	e1 f7       	brne	.-8      	; 0x1560 <WRONG_PASS_ERROR+0x1c>

	/* Return to main option */
	LCD_clearScreen();
    1568:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    156c:	2d e8       	ldi	r18, 0x8D	; 141
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	a9 01       	movw	r20, r18
    1576:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change pass");
    157a:	2b e9       	ldi	r18, 0x9B	; 155
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_displayStringRowColumn>
	g_key=KEYPAD_getPressedKey() ;
    1588:	0e 94 16 0c 	call	0x182c	; 0x182c <KEYPAD_getPressedKey>
    158c:	80 93 f8 00 	sts	0x00F8, r24

}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <ENTER_pass>:
 * Function responsible for
 * take user inputs
 * and display password entering in LCD
 */
void  ENTER_pass(uint8 *pass)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	a0 97       	sbiw	r28, 0x20	; 32
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	98 a3       	std	Y+32, r25	; 0x20
    15ac:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 counter=0 , key=0;
    15ae:	1e 8e       	std	Y+30, r1	; 0x1e
    15b0:	1d 8e       	std	Y+29, r1	; 0x1d

	for(counter=0;counter<NUM_OF_PASS;counter++)
    15b2:	1e 8e       	std	Y+30, r1	; 0x1e
    15b4:	85 c0       	rjmp	.+266    	; 0x16c0 <ENTER_pass+0x12a>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a6 e1       	ldi	r26, 0x16	; 22
    15bc:	b4 e4       	ldi	r27, 0x44	; 68
    15be:	89 8f       	std	Y+25, r24	; 0x19
    15c0:	9a 8f       	std	Y+26, r25	; 0x1a
    15c2:	ab 8f       	std	Y+27, r26	; 0x1b
    15c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	69 8d       	ldd	r22, Y+25	; 0x19
    15c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8d 8b       	std	Y+21, r24	; 0x15
    15e0:	9e 8b       	std	Y+22, r25	; 0x16
    15e2:	af 8b       	std	Y+23, r26	; 0x17
    15e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15e6:	6d 89       	ldd	r22, Y+21	; 0x15
    15e8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ea:	8f 89       	ldd	r24, Y+23	; 0x17
    15ec:	98 8d       	ldd	r25, Y+24	; 0x18
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <ENTER_pass+0x72>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9c 8b       	std	Y+20, r25	; 0x14
    1604:	8b 8b       	std	Y+19, r24	; 0x13
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <ENTER_pass+0xf0>
	else if (__tmp > 65535)
    1608:	6d 89       	ldd	r22, Y+21	; 0x15
    160a:	7e 89       	ldd	r23, Y+22	; 0x16
    160c:	8f 89       	ldd	r24, Y+23	; 0x17
    160e:	98 8d       	ldd	r25, Y+24	; 0x18
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <ENTER_pass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	69 8d       	ldd	r22, Y+25	; 0x19
    1622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9c 8b       	std	Y+20, r25	; 0x14
    1646:	8b 8b       	std	Y+19, r24	; 0x13
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <ENTER_pass+0xd2>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9a 8b       	std	Y+18, r25	; 0x12
    1650:	89 8b       	std	Y+17, r24	; 0x11
    1652:	89 89       	ldd	r24, Y+17	; 0x11
    1654:	9a 89       	ldd	r25, Y+18	; 0x12
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <ENTER_pass+0xc0>
    165a:	9a 8b       	std	Y+18, r25	; 0x12
    165c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8b 89       	ldd	r24, Y+19	; 0x13
    1660:	9c 89       	ldd	r25, Y+20	; 0x14
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9c 8b       	std	Y+20, r25	; 0x14
    1666:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8b 89       	ldd	r24, Y+19	; 0x13
    166a:	9c 89       	ldd	r25, Y+20	; 0x14
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <ENTER_pass+0xb4>
    1670:	14 c0       	rjmp	.+40     	; 0x169a <ENTER_pass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	6d 89       	ldd	r22, Y+21	; 0x15
    1674:	7e 89       	ldd	r23, Y+22	; 0x16
    1676:	8f 89       	ldd	r24, Y+23	; 0x17
    1678:	98 8d       	ldd	r25, Y+24	; 0x18
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9c 8b       	std	Y+20, r25	; 0x14
    1684:	8b 8b       	std	Y+19, r24	; 0x13
    1686:	8b 89       	ldd	r24, Y+19	; 0x13
    1688:	9c 89       	ldd	r25, Y+20	; 0x14
    168a:	98 8b       	std	Y+16, r25	; 0x10
    168c:	8f 87       	std	Y+15, r24	; 0x0f
    168e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1690:	98 89       	ldd	r25, Y+16	; 0x10
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <ENTER_pass+0xfc>
    1696:	98 8b       	std	Y+16, r25	; 0x10
    1698:	8f 87       	std	Y+15, r24	; 0x0f
	{
		/* Time for press the button*/
		_delay_ms(600);

		/* 	GET password value*/
		key = KEYPAD_getPressedKey();
    169a:	0e 94 16 0c 	call	0x182c	; 0x182c <KEYPAD_getPressedKey>
    169e:	8d 8f       	std	Y+29, r24	; 0x1d

		pass[counter]=key;
    16a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a8:	98 a1       	ldd	r25, Y+32	; 0x20
    16aa:	fc 01       	movw	r30, r24
    16ac:	e2 0f       	add	r30, r18
    16ae:	f3 1f       	adc	r31, r19
    16b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16b2:	80 83       	st	Z, r24
		/* 	Display * in LCD every 	Entering a number */
//		LCD_intgerToString(key);
		LCD_displayCharacter('*');
    16b4:	8a e2       	ldi	r24, 0x2A	; 42
    16b6:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_displayCharacter>
 */
void  ENTER_pass(uint8 *pass)
{
	uint8 counter=0 , key=0;

	for(counter=0;counter<NUM_OF_PASS;counter++)
    16ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	8e 8f       	std	Y+30, r24	; 0x1e
    16c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16c2:	85 30       	cpi	r24, 0x05	; 5
    16c4:	08 f4       	brcc	.+2      	; 0x16c8 <ENTER_pass+0x132>
    16c6:	77 cf       	rjmp	.-274    	; 0x15b6 <ENTER_pass+0x20>
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <ENTER_pass+0x13a>
		/* 	Display * in LCD every 	Entering a number */
//		LCD_intgerToString(key);
		LCD_displayCharacter('*');
	}
	while(key!= '=')
		key = KEYPAD_getPressedKey();
    16ca:	0e 94 16 0c 	call	0x182c	; 0x182c <KEYPAD_getPressedKey>
    16ce:	8d 8f       	std	Y+29, r24	; 0x1d
		pass[counter]=key;
		/* 	Display * in LCD every 	Entering a number */
//		LCD_intgerToString(key);
		LCD_displayCharacter('*');
	}
	while(key!= '=')
    16d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d2:	8d 33       	cpi	r24, 0x3D	; 61
    16d4:	d1 f7       	brne	.-12     	; 0x16ca <ENTER_pass+0x134>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a6 e9       	ldi	r26, 0x96	; 150
    16dc:	b3 e4       	ldi	r27, 0x43	; 67
    16de:	8b 87       	std	Y+11, r24	; 0x0b
    16e0:	9c 87       	std	Y+12, r25	; 0x0c
    16e2:	ad 87       	std	Y+13, r26	; 0x0d
    16e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8f 83       	std	Y+7, r24	; 0x07
    1700:	98 87       	std	Y+8, r25	; 0x08
    1702:	a9 87       	std	Y+9, r26	; 0x09
    1704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <ENTER_pass+0x192>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <ENTER_pass+0x210>
	else if (__tmp > 65535)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <ENTER_pass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6b 85       	ldd	r22, Y+11	; 0x0b
    1742:	7c 85       	ldd	r23, Y+12	; 0x0c
    1744:	8d 85       	ldd	r24, Y+13	; 0x0d
    1746:	9e 85       	ldd	r25, Y+14	; 0x0e
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9e 83       	std	Y+6, r25	; 0x06
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <ENTER_pass+0x1f2>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <ENTER_pass+0x1e0>
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <ENTER_pass+0x1d4>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <ENTER_pass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <ENTER_pass+0x21c>
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

	/* Send entered password to Control_ECU */

	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
	UART_sendByte(pass[0]);
    17c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    17c2:	f8 a1       	ldd	r31, Y+32	; 0x20
    17c4:	80 81       	ld	r24, Z
    17c6:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>

	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
	UART_sendByte(pass[1]);
    17d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17d2:	98 a1       	ldd	r25, Y+32	; 0x20
    17d4:	fc 01       	movw	r30, r24
    17d6:	31 96       	adiw	r30, 0x01	; 1
    17d8:	80 81       	ld	r24, Z
    17da:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>

	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
	UART_sendByte(pass[2]);
    17e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e6:	98 a1       	ldd	r25, Y+32	; 0x20
    17e8:	fc 01       	movw	r30, r24
    17ea:	32 96       	adiw	r30, 0x02	; 2
    17ec:	80 81       	ld	r24, Z
    17ee:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>

	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
	UART_sendByte(pass[3]);
    17f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17fa:	98 a1       	ldd	r25, Y+32	; 0x20
    17fc:	fc 01       	movw	r30, r24
    17fe:	33 96       	adiw	r30, 0x03	; 3
    1800:	80 81       	ld	r24, Z
    1802:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>

	/* Send to Control_ECU that HMI_ECU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
	UART_sendByte(pass[4]);
    180c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    180e:	98 a1       	ldd	r25, Y+32	; 0x20
    1810:	fc 01       	movw	r30, r24
    1812:	34 96       	adiw	r30, 0x04	; 4
    1814:	80 81       	ld	r24, Z
    1816:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
}
    181a:	a0 96       	adiw	r28, 0x20	; 32
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	60 97       	sbiw	r28, 0x10	; 16
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
	uint8 col=0,row=0;
    1840:	18 8a       	std	Y+16, r1	; 0x10
    1842:	1f 86       	std	Y+15, r1	; 0x0f
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	63 e0       	ldi	r22, 0x03	; 3
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	64 e0       	ldi	r22, 0x04	; 4
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	65 e0       	ldi	r22, 0x05	; 5
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	66 e0       	ldi	r22, 0x06	; 6
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	67 e0       	ldi	r22, 0x07	; 7
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a8 e4       	ldi	r26, 0x48	; 72
    189a:	b2 e4       	ldi	r27, 0x42	; 66
    189c:	8b 87       	std	Y+11, r24	; 0x0b
    189e:	9c 87       	std	Y+12, r25	; 0x0c
    18a0:	ad 87       	std	Y+13, r26	; 0x0d
    18a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a ef       	ldi	r20, 0xFA	; 250
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	98 87       	std	Y+8, r25	; 0x08
    18c0:	a9 87       	std	Y+9, r26	; 0x09
    18c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <KEYPAD_getPressedKey+0xba>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <KEYPAD_getPressedKey+0x138>
	else if (__tmp > 65535)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <KEYPAD_getPressedKey+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1900:	7c 85       	ldd	r23, Y+12	; 0x0c
    1902:	8d 85       	ldd	r24, Y+13	; 0x0d
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <KEYPAD_getPressedKey+0x11a>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	8b 83       	std	Y+3, r24	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <KEYPAD_getPressedKey+0x108>
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <KEYPAD_getPressedKey+0xfc>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <KEYPAD_getPressedKey+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <KEYPAD_getPressedKey+0x144>
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
#endif
	for(;;)
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1978:	1f 86       	std	Y+15, r1	; 0x0f
    197a:	39 c0       	rjmp	.+114    	; 0x19ee <KEYPAD_getPressedKey+0x1c2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	6f 85       	ldd	r22, Y+15	; 0x0f
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1990:	18 8a       	std	Y+16, r1	; 0x10
    1992:	22 c0       	rjmp	.+68     	; 0x19d8 <KEYPAD_getPressedKey+0x1ac>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1994:	88 89       	ldd	r24, Y+16	; 0x10
    1996:	98 2f       	mov	r25, r24
    1998:	9c 5f       	subi	r25, 0xFC	; 252
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	69 2f       	mov	r22, r25
    199e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <GPIO_readPin>
    19a2:	88 23       	and	r24, r24
    19a4:	b1 f4       	brne	.+44     	; 0x19d2 <KEYPAD_getPressedKey+0x1a6>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    19a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	98 2f       	mov	r25, r24
    19b6:	88 89       	ldd	r24, Y+16	; 0x10
    19b8:	89 0f       	add	r24, r25
    19ba:	8f 5f       	subi	r24, 0xFF	; 255
    19bc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    19c0:	60 96       	adiw	r28, 0x10	; 16
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    19d2:	88 89       	ldd	r24, Y+16	; 0x10
    19d4:	8f 5f       	subi	r24, 0xFF	; 255
    19d6:	88 8b       	std	Y+16, r24	; 0x10
    19d8:	88 89       	ldd	r24, Y+16	; 0x10
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	d8 f2       	brcs	.-74     	; 0x1994 <KEYPAD_getPressedKey+0x168>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	for(;;)
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	8f 87       	std	Y+15, r24	; 0x0f
    19ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	20 f2       	brcs	.-120    	; 0x197c <KEYPAD_getPressedKey+0x150>
    19f4:	4f cf       	rjmp	.-354    	; 0x1894 <KEYPAD_getPressedKey+0x68>

000019f6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <KEYPAD_4x4_adjustKeyNumber+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <KEYPAD_4x4_adjustKeyNumber+0x8>
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a04:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	3c 83       	std	Y+4, r19	; 0x04
    1a0e:	2b 83       	std	Y+3, r18	; 0x03
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	88 30       	cpi	r24, 0x08	; 8
    1a16:	91 05       	cpc	r25, r1
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a1a:	70 c0       	rjmp	.+224    	; 0x1afc <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	29 30       	cpi	r18, 0x09	; 9
    1a22:	31 05       	cpc	r19, r1
    1a24:	5c f5       	brge	.+86     	; 0x1a7c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	84 30       	cpi	r24, 0x04	; 4
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a30:	59 c0       	rjmp	.+178    	; 0x1ae4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a32:	2b 81       	ldd	r18, Y+3	; 0x03
    1a34:	3c 81       	ldd	r19, Y+4	; 0x04
    1a36:	25 30       	cpi	r18, 0x05	; 5
    1a38:	31 05       	cpc	r19, r1
    1a3a:	9c f4       	brge	.+38     	; 0x1a62 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	82 30       	cpi	r24, 0x02	; 2
    1a42:	91 05       	cpc	r25, r1
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a46:	48 c0       	rjmp	.+144    	; 0x1ad8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	23 30       	cpi	r18, 0x03	; 3
    1a4e:	31 05       	cpc	r19, r1
    1a50:	0c f0       	brlt	.+2      	; 0x1a54 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a52:	45 c0       	rjmp	.+138    	; 0x1ade <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1a5e:	39 c0       	rjmp	.+114    	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1a60:	67 c0       	rjmp	.+206    	; 0x1b30 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	26 30       	cpi	r18, 0x06	; 6
    1a68:	31 05       	cpc	r19, r1
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1a6c:	41 c0       	rjmp	.+130    	; 0x1af0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	87 30       	cpi	r24, 0x07	; 7
    1a74:	91 05       	cpc	r25, r1
    1a76:	0c f0       	brlt	.+2      	; 0x1a7a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a78:	3e c0       	rjmp	.+124    	; 0x1af6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1a7a:	37 c0       	rjmp	.+110    	; 0x1aea <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a80:	2c 30       	cpi	r18, 0x0C	; 12
    1a82:	31 05       	cpc	r19, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1a86:	46 c0       	rjmp	.+140    	; 0x1b14 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	8d 30       	cpi	r24, 0x0D	; 13
    1a8e:	91 05       	cpc	r25, r1
    1a90:	5c f4       	brge	.+22     	; 0x1aa8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	2a 30       	cpi	r18, 0x0A	; 10
    1a98:	31 05       	cpc	r19, r1
    1a9a:	b1 f1       	breq	.+108    	; 0x1b08 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	8b 30       	cpi	r24, 0x0B	; 11
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	a4 f5       	brge	.+104    	; 0x1b0e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1aa6:	2d c0       	rjmp	.+90     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	2e 30       	cpi	r18, 0x0E	; 14
    1aae:	31 05       	cpc	r19, r1
    1ab0:	b9 f1       	breq	.+110    	; 0x1b20 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	8e 30       	cpi	r24, 0x0E	; 14
    1ab8:	91 05       	cpc	r25, r1
    1aba:	7c f1       	brlt	.+94     	; 0x1b1a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1abc:	2b 81       	ldd	r18, Y+3	; 0x03
    1abe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac0:	2f 30       	cpi	r18, 0x0F	; 15
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	79 f1       	breq	.+94     	; 0x1b24 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	80 31       	cpi	r24, 0x10	; 16
    1acc:	91 05       	cpc	r25, r1
    1ace:	69 f1       	breq	.+90     	; 0x1b2a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ad0:	2f c0       	rjmp	.+94     	; 0x1b30 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    1ad2:	87 e0       	ldi	r24, 0x07	; 7
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	2e c0       	rjmp	.+92     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    1ad8:	88 e0       	ldi	r24, 0x08	; 8
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	2b c0       	rjmp	.+86     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    1ade:	89 e0       	ldi	r24, 0x09	; 9
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	28 c0       	rjmp	.+80     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    1ae4:	85 e2       	ldi	r24, 0x25	; 37
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	25 c0       	rjmp	.+74     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	22 c0       	rjmp	.+68     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    1af0:	85 e0       	ldi	r24, 0x05	; 5
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	1f c0       	rjmp	.+62     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    1af6:	86 e0       	ldi	r24, 0x06	; 6
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	1c c0       	rjmp	.+56     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1afc:	8a e2       	ldi	r24, 0x2A	; 42
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	19 c0       	rjmp	.+50     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	16 c0       	rjmp	.+44     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	10 c0       	rjmp	.+32     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b14:	8d e2       	ldi	r24, 0x2D	; 45
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	0d c0       	rjmp	.+26     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 'c';  /* ASCII Code of 'c */
    1b1a:	83 e6       	ldi	r24, 0x63	; 99
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	0a c0       	rjmp	.+20     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    1b20:	19 82       	std	Y+1, r1	; 0x01
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b24:	8d e3       	ldi	r24, 0x3D	; 61
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b2a:	8b e2       	ldi	r24, 0x2B	; 43
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <GPIO_setupPinDirection>

	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID,LOGIC_LOW);/* Disable LCD RW=0 */
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a0 ea       	ldi	r26, 0xA0	; 160
    1b86:	b1 e4       	ldi	r27, 0x41	; 65
    1b88:	8b 87       	std	Y+11, r24	; 0x0b
    1b8a:	9c 87       	std	Y+12, r25	; 0x0c
    1b8c:	ad 87       	std	Y+13, r26	; 0x0d
    1b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a ef       	ldi	r20, 0xFA	; 250
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
    1baa:	98 87       	std	Y+8, r25	; 0x08
    1bac:	a9 87       	std	Y+9, r26	; 0x09
    1bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <LCD_init+0x8e>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	3f c0       	rjmp	.+126    	; 0x1c50 <LCD_init+0x10c>
	else if (__tmp > 65535)
    1bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd4:	78 85       	ldd	r23, Y+8	; 0x08
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	4f e7       	ldi	r20, 0x7F	; 127
    1be0:	57 e4       	ldi	r21, 0x47	; 71
    1be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	4c f5       	brge	.+82     	; 0x1c3c <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <LCD_init+0xee>
    1c14:	88 ec       	ldi	r24, 0xC8	; 200
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_init+0xdc>
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <LCD_init+0xd0>
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_init+0x118>
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	6f ef       	ldi	r22, 0xFF	; 255
    1c68:	0e 94 49 08 	call	0x1092	; 0x1092 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1c6c:	88 e3       	ldi	r24, 0x38	; 56
    1c6e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c72:	8c e0       	ldi	r24, 0x0C	; 12
    1c74:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>
}
    1c7e:	2e 96       	adiw	r28, 0x0e	; 14
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	e9 97       	sbiw	r28, 0x39	; 57
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 e8       	ldi	r26, 0x80	; 128
    1cb6:	bf e3       	ldi	r27, 0x3F	; 63
    1cb8:	8d ab       	std	Y+53, r24	; 0x35
    1cba:	9e ab       	std	Y+54, r25	; 0x36
    1cbc:	af ab       	std	Y+55, r26	; 0x37
    1cbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	4a ef       	ldi	r20, 0xFA	; 250
    1cce:	54 e4       	ldi	r21, 0x44	; 68
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	89 ab       	std	Y+49, r24	; 0x31
    1cda:	9a ab       	std	Y+50, r25	; 0x32
    1cdc:	ab ab       	std	Y+51, r26	; 0x33
    1cde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e8       	ldi	r20, 0x80	; 128
    1cee:	5f e3       	ldi	r21, 0x3F	; 63
    1cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf4:	88 23       	and	r24, r24
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <LCD_sendCommand+0x72>
		__ticks = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	98 ab       	std	Y+48, r25	; 0x30
    1cfe:	8f a7       	std	Y+47, r24	; 0x2f
    1d00:	3f c0       	rjmp	.+126    	; 0x1d80 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1d02:	69 a9       	ldd	r22, Y+49	; 0x31
    1d04:	7a a9       	ldd	r23, Y+50	; 0x32
    1d06:	8b a9       	ldd	r24, Y+51	; 0x33
    1d08:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	4f e7       	ldi	r20, 0x7F	; 127
    1d10:	57 e4       	ldi	r21, 0x47	; 71
    1d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	4c f5       	brge	.+82     	; 0x1d6c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d20:	98 ad       	ldd	r25, Y+56	; 0x38
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e2       	ldi	r20, 0x20	; 32
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	98 ab       	std	Y+48, r25	; 0x30
    1d40:	8f a7       	std	Y+47, r24	; 0x2f
    1d42:	0f c0       	rjmp	.+30     	; 0x1d62 <LCD_sendCommand+0xd2>
    1d44:	88 ec       	ldi	r24, 0xC8	; 200
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9e a7       	std	Y+46, r25	; 0x2e
    1d4a:	8d a7       	std	Y+45, r24	; 0x2d
    1d4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <LCD_sendCommand+0xc0>
    1d54:	9e a7       	std	Y+46, r25	; 0x2e
    1d56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	98 ab       	std	Y+48, r25	; 0x30
    1d60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d64:	98 a9       	ldd	r25, Y+48	; 0x30
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <LCD_sendCommand+0xb4>
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d70:	8b a9       	ldd	r24, Y+51	; 0x33
    1d72:	9c a9       	ldd	r25, Y+52	; 0x34
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	98 ab       	std	Y+48, r25	; 0x30
    1d7e:	8f a7       	std	Y+47, r24	; 0x2f
    1d80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d82:	98 a9       	ldd	r25, Y+48	; 0x30
    1d84:	9c a7       	std	Y+44, r25	; 0x2c
    1d86:	8b a7       	std	Y+43, r24	; 0x2b
    1d88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <LCD_sendCommand+0xfc>
    1d90:	9c a7       	std	Y+44, r25	; 0x2c
    1d92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e8       	ldi	r26, 0x80	; 128
    1da4:	bf e3       	ldi	r27, 0x3F	; 63
    1da6:	8f a3       	std	Y+39, r24	; 0x27
    1da8:	98 a7       	std	Y+40, r25	; 0x28
    1daa:	a9 a7       	std	Y+41, r26	; 0x29
    1dac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dae:	6f a1       	ldd	r22, Y+39	; 0x27
    1db0:	78 a5       	ldd	r23, Y+40	; 0x28
    1db2:	89 a5       	ldd	r24, Y+41	; 0x29
    1db4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4a ef       	ldi	r20, 0xFA	; 250
    1dbc:	54 e4       	ldi	r21, 0x44	; 68
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	8b a3       	std	Y+35, r24	; 0x23
    1dc8:	9c a3       	std	Y+36, r25	; 0x24
    1dca:	ad a3       	std	Y+37, r26	; 0x25
    1dcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dce:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	2c f4       	brge	.+10     	; 0x1df0 <LCD_sendCommand+0x160>
		__ticks = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9a a3       	std	Y+34, r25	; 0x22
    1dec:	89 a3       	std	Y+33, r24	; 0x21
    1dee:	3f c0       	rjmp	.+126    	; 0x1e6e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1df0:	6b a1       	ldd	r22, Y+35	; 0x23
    1df2:	7c a1       	ldd	r23, Y+36	; 0x24
    1df4:	8d a1       	ldd	r24, Y+37	; 0x25
    1df6:	9e a1       	ldd	r25, Y+38	; 0x26
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	3f ef       	ldi	r19, 0xFF	; 255
    1dfc:	4f e7       	ldi	r20, 0x7F	; 127
    1dfe:	57 e4       	ldi	r21, 0x47	; 71
    1e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	4c f5       	brge	.+82     	; 0x1e5a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	6f a1       	ldd	r22, Y+39	; 0x27
    1e0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9a a3       	std	Y+34, r25	; 0x22
    1e2e:	89 a3       	std	Y+33, r24	; 0x21
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <LCD_sendCommand+0x1c0>
    1e32:	88 ec       	ldi	r24, 0xC8	; 200
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	98 a3       	std	Y+32, r25	; 0x20
    1e38:	8f 8f       	std	Y+31, r24	; 0x1f
    1e3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_sendCommand+0x1ae>
    1e42:	98 a3       	std	Y+32, r25	; 0x20
    1e44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e46:	89 a1       	ldd	r24, Y+33	; 0x21
    1e48:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	9a a3       	std	Y+34, r25	; 0x22
    1e4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e50:	89 a1       	ldd	r24, Y+33	; 0x21
    1e52:	9a a1       	ldd	r25, Y+34	; 0x22
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	69 f7       	brne	.-38     	; 0x1e32 <LCD_sendCommand+0x1a2>
    1e58:	14 c0       	rjmp	.+40     	; 0x1e82 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e60:	9e a1       	ldd	r25, Y+38	; 0x26
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	9a a3       	std	Y+34, r25	; 0x22
    1e6c:	89 a3       	std	Y+33, r24	; 0x21
    1e6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e70:	9a a1       	ldd	r25, Y+34	; 0x22
    1e72:	9e 8f       	std	Y+30, r25	; 0x1e
    1e74:	8d 8f       	std	Y+29, r24	; 0x1d
    1e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_sendCommand+0x1ea>
    1e7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	69 ad       	ldd	r22, Y+57	; 0x39
    1e86:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePort>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e8       	ldi	r26, 0x80	; 128
    1e90:	bf e3       	ldi	r27, 0x3F	; 63
    1e92:	89 8f       	std	Y+25, r24	; 0x19
    1e94:	9a 8f       	std	Y+26, r25	; 0x1a
    1e96:	ab 8f       	std	Y+27, r26	; 0x1b
    1e98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a ef       	ldi	r20, 0xFA	; 250
    1ea8:	54 e4       	ldi	r21, 0x44	; 68
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	8d 8b       	std	Y+21, r24	; 0x15
    1eb4:	9e 8b       	std	Y+22, r25	; 0x16
    1eb6:	af 8b       	std	Y+23, r26	; 0x17
    1eb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eba:	6d 89       	ldd	r22, Y+21	; 0x15
    1ebc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	2c f4       	brge	.+10     	; 0x1edc <LCD_sendCommand+0x24c>
		__ticks = 1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9c 8b       	std	Y+20, r25	; 0x14
    1ed8:	8b 8b       	std	Y+19, r24	; 0x13
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1edc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ede:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	4c f5       	brge	.+82     	; 0x1f46 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	0f c0       	rjmp	.+30     	; 0x1f3c <LCD_sendCommand+0x2ac>
    1f1e:	88 ec       	ldi	r24, 0xC8	; 200
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9a 8b       	std	Y+18, r25	; 0x12
    1f24:	89 8b       	std	Y+17, r24	; 0x11
    1f26:	89 89       	ldd	r24, Y+17	; 0x11
    1f28:	9a 89       	ldd	r25, Y+18	; 0x12
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_sendCommand+0x29a>
    1f2e:	9a 8b       	std	Y+18, r25	; 0x12
    1f30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	69 f7       	brne	.-38     	; 0x1f1e <LCD_sendCommand+0x28e>
    1f44:	14 c0       	rjmp	.+40     	; 0x1f6e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f46:	6d 89       	ldd	r22, Y+21	; 0x15
    1f48:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9c 8b       	std	Y+20, r25	; 0x14
    1f58:	8b 8b       	std	Y+19, r24	; 0x13
    1f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5e:	98 8b       	std	Y+16, r25	; 0x10
    1f60:	8f 87       	std	Y+15, r24	; 0x0f
    1f62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f64:	98 89       	ldd	r25, Y+16	; 0x10
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_sendCommand+0x2d6>
    1f6a:	98 8b       	std	Y+16, r25	; 0x10
    1f6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	bf e3       	ldi	r27, 0x3F	; 63
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	ad 87       	std	Y+13, r26	; 0x0d
    1f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a ef       	ldi	r20, 0xFA	; 250
    1f96:	54 e4       	ldi	r21, 0x44	; 68
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8f 83       	std	Y+7, r24	; 0x07
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	a9 87       	std	Y+9, r26	; 0x09
    1fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <LCD_sendCommand+0x33a>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	0f c0       	rjmp	.+30     	; 0x202a <LCD_sendCommand+0x39a>
    200c:	88 ec       	ldi	r24, 0xC8	; 200
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_sendCommand+0x388>
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <LCD_sendCommand+0x37c>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_sendCommand+0x3c4>
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    205c:	e9 96       	adiw	r28, 0x39	; 57
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	e9 97       	sbiw	r28, 0x39	; 57
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf e3       	ldi	r27, 0x3F	; 63
    2096:	8d ab       	std	Y+53, r24	; 0x35
    2098:	9e ab       	std	Y+54, r25	; 0x36
    209a:	af ab       	std	Y+55, r26	; 0x37
    209c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	6d a9       	ldd	r22, Y+53	; 0x35
    20a0:	7e a9       	ldd	r23, Y+54	; 0x36
    20a2:	8f a9       	ldd	r24, Y+55	; 0x37
    20a4:	98 ad       	ldd	r25, Y+56	; 0x38
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a ef       	ldi	r20, 0xFA	; 250
    20ac:	54 e4       	ldi	r21, 0x44	; 68
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	89 ab       	std	Y+49, r24	; 0x31
    20b8:	9a ab       	std	Y+50, r25	; 0x32
    20ba:	ab ab       	std	Y+51, r26	; 0x33
    20bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20be:	69 a9       	ldd	r22, Y+49	; 0x31
    20c0:	7a a9       	ldd	r23, Y+50	; 0x32
    20c2:	8b a9       	ldd	r24, Y+51	; 0x33
    20c4:	9c a9       	ldd	r25, Y+52	; 0x34
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	98 ab       	std	Y+48, r25	; 0x30
    20dc:	8f a7       	std	Y+47, r24	; 0x2f
    20de:	3f c0       	rjmp	.+126    	; 0x215e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    20e0:	69 a9       	ldd	r22, Y+49	; 0x31
    20e2:	7a a9       	ldd	r23, Y+50	; 0x32
    20e4:	8b a9       	ldd	r24, Y+51	; 0x33
    20e6:	9c a9       	ldd	r25, Y+52	; 0x34
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	6d a9       	ldd	r22, Y+53	; 0x35
    20fa:	7e a9       	ldd	r23, Y+54	; 0x36
    20fc:	8f a9       	ldd	r24, Y+55	; 0x37
    20fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	98 ab       	std	Y+48, r25	; 0x30
    211e:	8f a7       	std	Y+47, r24	; 0x2f
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <LCD_displayCharacter+0xd2>
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9e a7       	std	Y+46, r25	; 0x2e
    2128:	8d a7       	std	Y+45, r24	; 0x2d
    212a:	8d a5       	ldd	r24, Y+45	; 0x2d
    212c:	9e a5       	ldd	r25, Y+46	; 0x2e
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_displayCharacter+0xc0>
    2132:	9e a7       	std	Y+46, r25	; 0x2e
    2134:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	8f a5       	ldd	r24, Y+47	; 0x2f
    2138:	98 a9       	ldd	r25, Y+48	; 0x30
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	98 ab       	std	Y+48, r25	; 0x30
    213e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	8f a5       	ldd	r24, Y+47	; 0x2f
    2142:	98 a9       	ldd	r25, Y+48	; 0x30
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <LCD_displayCharacter+0xb4>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	69 a9       	ldd	r22, Y+49	; 0x31
    214c:	7a a9       	ldd	r23, Y+50	; 0x32
    214e:	8b a9       	ldd	r24, Y+51	; 0x33
    2150:	9c a9       	ldd	r25, Y+52	; 0x34
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	98 ab       	std	Y+48, r25	; 0x30
    215c:	8f a7       	std	Y+47, r24	; 0x2f
    215e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2160:	98 a9       	ldd	r25, Y+48	; 0x30
    2162:	9c a7       	std	Y+44, r25	; 0x2c
    2164:	8b a7       	std	Y+43, r24	; 0x2b
    2166:	8b a5       	ldd	r24, Y+43	; 0x2b
    2168:	9c a5       	ldd	r25, Y+44	; 0x2c
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_displayCharacter+0xfc>
    216e:	9c a7       	std	Y+44, r25	; 0x2c
    2170:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	62 e0       	ldi	r22, 0x02	; 2
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e8       	ldi	r26, 0x80	; 128
    2182:	bf e3       	ldi	r27, 0x3F	; 63
    2184:	8f a3       	std	Y+39, r24	; 0x27
    2186:	98 a7       	std	Y+40, r25	; 0x28
    2188:	a9 a7       	std	Y+41, r26	; 0x29
    218a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	6f a1       	ldd	r22, Y+39	; 0x27
    218e:	78 a5       	ldd	r23, Y+40	; 0x28
    2190:	89 a5       	ldd	r24, Y+41	; 0x29
    2192:	9a a5       	ldd	r25, Y+42	; 0x2a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a ef       	ldi	r20, 0xFA	; 250
    219a:	54 e4       	ldi	r21, 0x44	; 68
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	8b a3       	std	Y+35, r24	; 0x23
    21a6:	9c a3       	std	Y+36, r25	; 0x24
    21a8:	ad a3       	std	Y+37, r26	; 0x25
    21aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21ac:	6b a1       	ldd	r22, Y+35	; 0x23
    21ae:	7c a1       	ldd	r23, Y+36	; 0x24
    21b0:	8d a1       	ldd	r24, Y+37	; 0x25
    21b2:	9e a1       	ldd	r25, Y+38	; 0x26
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <LCD_displayCharacter+0x160>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9a a3       	std	Y+34, r25	; 0x22
    21ca:	89 a3       	std	Y+33, r24	; 0x21
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    21ce:	6b a1       	ldd	r22, Y+35	; 0x23
    21d0:	7c a1       	ldd	r23, Y+36	; 0x24
    21d2:	8d a1       	ldd	r24, Y+37	; 0x25
    21d4:	9e a1       	ldd	r25, Y+38	; 0x26
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	6f a1       	ldd	r22, Y+39	; 0x27
    21e8:	78 a5       	ldd	r23, Y+40	; 0x28
    21ea:	89 a5       	ldd	r24, Y+41	; 0x29
    21ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9a a3       	std	Y+34, r25	; 0x22
    220c:	89 a3       	std	Y+33, r24	; 0x21
    220e:	0f c0       	rjmp	.+30     	; 0x222e <LCD_displayCharacter+0x1c0>
    2210:	88 ec       	ldi	r24, 0xC8	; 200
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	98 a3       	std	Y+32, r25	; 0x20
    2216:	8f 8f       	std	Y+31, r24	; 0x1f
    2218:	8f 8d       	ldd	r24, Y+31	; 0x1f
    221a:	98 a1       	ldd	r25, Y+32	; 0x20
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_displayCharacter+0x1ae>
    2220:	98 a3       	std	Y+32, r25	; 0x20
    2222:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	89 a1       	ldd	r24, Y+33	; 0x21
    2226:	9a a1       	ldd	r25, Y+34	; 0x22
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9a a3       	std	Y+34, r25	; 0x22
    222c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	89 a1       	ldd	r24, Y+33	; 0x21
    2230:	9a a1       	ldd	r25, Y+34	; 0x22
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <LCD_displayCharacter+0x1a2>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	6b a1       	ldd	r22, Y+35	; 0x23
    223a:	7c a1       	ldd	r23, Y+36	; 0x24
    223c:	8d a1       	ldd	r24, Y+37	; 0x25
    223e:	9e a1       	ldd	r25, Y+38	; 0x26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9a a3       	std	Y+34, r25	; 0x22
    224a:	89 a3       	std	Y+33, r24	; 0x21
    224c:	89 a1       	ldd	r24, Y+33	; 0x21
    224e:	9a a1       	ldd	r25, Y+34	; 0x22
    2250:	9e 8f       	std	Y+30, r25	; 0x1e
    2252:	8d 8f       	std	Y+29, r24	; 0x1d
    2254:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2256:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_displayCharacter+0x1ea>
    225c:	9e 8f       	std	Y+30, r25	; 0x1e
    225e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	69 ad       	ldd	r22, Y+57	; 0x39
    2264:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePort>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e8       	ldi	r26, 0x80	; 128
    226e:	bf e3       	ldi	r27, 0x3F	; 63
    2270:	89 8f       	std	Y+25, r24	; 0x19
    2272:	9a 8f       	std	Y+26, r25	; 0x1a
    2274:	ab 8f       	std	Y+27, r26	; 0x1b
    2276:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	69 8d       	ldd	r22, Y+25	; 0x19
    227a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    227c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a ef       	ldi	r20, 0xFA	; 250
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8d 8b       	std	Y+21, r24	; 0x15
    2292:	9e 8b       	std	Y+22, r25	; 0x16
    2294:	af 8b       	std	Y+23, r26	; 0x17
    2296:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2298:	6d 89       	ldd	r22, Y+21	; 0x15
    229a:	7e 89       	ldd	r23, Y+22	; 0x16
    229c:	8f 89       	ldd	r24, Y+23	; 0x17
    229e:	98 8d       	ldd	r25, Y+24	; 0x18
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	2c f4       	brge	.+10     	; 0x22ba <LCD_displayCharacter+0x24c>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 8b       	std	Y+20, r25	; 0x14
    22b6:	8b 8b       	std	Y+19, r24	; 0x13
    22b8:	3f c0       	rjmp	.+126    	; 0x2338 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	4c f5       	brge	.+82     	; 0x2324 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d2:	69 8d       	ldd	r22, Y+25	; 0x19
    22d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <LCD_displayCharacter+0x2ac>
    22fc:	88 ec       	ldi	r24, 0xC8	; 200
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9a 8b       	std	Y+18, r25	; 0x12
    2302:	89 8b       	std	Y+17, r24	; 0x11
    2304:	89 89       	ldd	r24, Y+17	; 0x11
    2306:	9a 89       	ldd	r25, Y+18	; 0x12
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_displayCharacter+0x29a>
    230c:	9a 8b       	std	Y+18, r25	; 0x12
    230e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2310:	8b 89       	ldd	r24, Y+19	; 0x13
    2312:	9c 89       	ldd	r25, Y+20	; 0x14
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	9c 8b       	std	Y+20, r25	; 0x14
    2318:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231a:	8b 89       	ldd	r24, Y+19	; 0x13
    231c:	9c 89       	ldd	r25, Y+20	; 0x14
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	69 f7       	brne	.-38     	; 0x22fc <LCD_displayCharacter+0x28e>
    2322:	14 c0       	rjmp	.+40     	; 0x234c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2324:	6d 89       	ldd	r22, Y+21	; 0x15
    2326:	7e 89       	ldd	r23, Y+22	; 0x16
    2328:	8f 89       	ldd	r24, Y+23	; 0x17
    232a:	98 8d       	ldd	r25, Y+24	; 0x18
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	8b 89       	ldd	r24, Y+19	; 0x13
    233a:	9c 89       	ldd	r25, Y+20	; 0x14
    233c:	98 8b       	std	Y+16, r25	; 0x10
    233e:	8f 87       	std	Y+15, r24	; 0x0f
    2340:	8f 85       	ldd	r24, Y+15	; 0x0f
    2342:	98 89       	ldd	r25, Y+16	; 0x10
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_displayCharacter+0x2d6>
    2348:	98 8b       	std	Y+16, r25	; 0x10
    234a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	62 e0       	ldi	r22, 0x02	; 2
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 c3 06 	call	0xd86	; 0xd86 <GPIO_writePin>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e8       	ldi	r26, 0x80	; 128
    235c:	bf e3       	ldi	r27, 0x3F	; 63
    235e:	8b 87       	std	Y+11, r24	; 0x0b
    2360:	9c 87       	std	Y+12, r25	; 0x0c
    2362:	ad 87       	std	Y+13, r26	; 0x0d
    2364:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2366:	6b 85       	ldd	r22, Y+11	; 0x0b
    2368:	7c 85       	ldd	r23, Y+12	; 0x0c
    236a:	8d 85       	ldd	r24, Y+13	; 0x0d
    236c:	9e 85       	ldd	r25, Y+14	; 0x0e
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a ef       	ldi	r20, 0xFA	; 250
    2374:	54 e4       	ldi	r21, 0x44	; 68
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8f 83       	std	Y+7, r24	; 0x07
    2380:	98 87       	std	Y+8, r25	; 0x08
    2382:	a9 87       	std	Y+9, r26	; 0x09
    2384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	2c f4       	brge	.+10     	; 0x23a8 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	3f c0       	rjmp	.+126    	; 0x2426 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	57 e4       	ldi	r21, 0x47	; 71
    23b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	4c f5       	brge	.+82     	; 0x2412 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <LCD_displayCharacter+0x39a>
    23ea:	88 ec       	ldi	r24, 0xC8	; 200
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_displayCharacter+0x388>
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	69 f7       	brne	.-38     	; 0x23ea <LCD_displayCharacter+0x37c>
    2410:	14 c0       	rjmp	.+40     	; 0x243a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2412:	6f 81       	ldd	r22, Y+7	; 0x07
    2414:	78 85       	ldd	r23, Y+8	; 0x08
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_displayCharacter+0x3c4>
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    243a:	e9 96       	adiw	r28, 0x39	; 57
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <LCD_displayString+0x6>
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9b 83       	std	Y+3, r25	; 0x03
    245a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    245c:	19 82       	std	Y+1, r1	; 0x01
    245e:	0e c0       	rjmp	.+28     	; 0x247c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	9b 81       	ldd	r25, Y+3	; 0x03
    246a:	fc 01       	movw	r30, r24
    246c:	e2 0f       	add	r30, r18
    246e:	f3 1f       	adc	r31, r19
    2470:	80 81       	ld	r24, Z
    2472:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_displayCharacter>
		i++;
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	9b 81       	ldd	r25, Y+3	; 0x03
    2486:	fc 01       	movw	r30, r24
    2488:	e2 0f       	add	r30, r18
    248a:	f3 1f       	adc	r31, r19
    248c:	80 81       	ld	r24, Z
    248e:	88 23       	and	r24, r24
    2490:	39 f7       	brne	.-50     	; 0x2460 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <LCD_moveCursor+0x6>
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <LCD_moveCursor+0x8>
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	8a 83       	std	Y+2, r24	; 0x02
    24ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	3d 83       	std	Y+5, r19	; 0x05
    24b8:	2c 83       	std	Y+4, r18	; 0x04
    24ba:	8c 81       	ldd	r24, Y+4	; 0x04
    24bc:	9d 81       	ldd	r25, Y+5	; 0x05
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	91 05       	cpc	r25, r1
    24c2:	c1 f0       	breq	.+48     	; 0x24f4 <LCD_moveCursor+0x56>
    24c4:	2c 81       	ldd	r18, Y+4	; 0x04
    24c6:	3d 81       	ldd	r19, Y+5	; 0x05
    24c8:	22 30       	cpi	r18, 0x02	; 2
    24ca:	31 05       	cpc	r19, r1
    24cc:	2c f4       	brge	.+10     	; 0x24d8 <LCD_moveCursor+0x3a>
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	9d 81       	ldd	r25, Y+5	; 0x05
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	61 f0       	breq	.+24     	; 0x24ee <LCD_moveCursor+0x50>
    24d6:	19 c0       	rjmp	.+50     	; 0x250a <LCD_moveCursor+0x6c>
    24d8:	2c 81       	ldd	r18, Y+4	; 0x04
    24da:	3d 81       	ldd	r19, Y+5	; 0x05
    24dc:	22 30       	cpi	r18, 0x02	; 2
    24de:	31 05       	cpc	r19, r1
    24e0:	69 f0       	breq	.+26     	; 0x24fc <LCD_moveCursor+0x5e>
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	9d 81       	ldd	r25, Y+5	; 0x05
    24e6:	83 30       	cpi	r24, 0x03	; 3
    24e8:	91 05       	cpc	r25, r1
    24ea:	61 f0       	breq	.+24     	; 0x2504 <LCD_moveCursor+0x66>
    24ec:	0e c0       	rjmp	.+28     	; 0x250a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	0b c0       	rjmp	.+22     	; 0x250a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	80 5c       	subi	r24, 0xC0	; 192
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	07 c0       	rjmp	.+14     	; 0x250a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	80 5f       	subi	r24, 0xF0	; 240
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	03 c0       	rjmp	.+6      	; 0x250a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	80 5b       	subi	r24, 0xB0	; 176
    2508:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	80 68       	ori	r24, 0x80	; 128
    250e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	00 d0       	rcall	.+0      	; 0x2528 <LCD_displayStringRowColumn+0x6>
    2528:	00 d0       	rcall	.+0      	; 0x252a <LCD_displayStringRowColumn+0x8>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	6a 83       	std	Y+2, r22	; 0x02
    2532:	5c 83       	std	Y+4, r21	; 0x04
    2534:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	6a 81       	ldd	r22, Y+2	; 0x02
    253a:	0e 94 4f 12 	call	0x249e	; 0x249e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	0e 94 26 12 	call	0x244c	; 0x244c <LCD_displayString>
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	62 97       	sbiw	r28, 0x12	; 18
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    256c:	89 89       	ldd	r24, Y+17	; 0x11
    256e:	9a 89       	ldd	r25, Y+18	; 0x12
    2570:	9e 01       	movw	r18, r28
    2572:	2f 5f       	subi	r18, 0xFF	; 255
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	b9 01       	movw	r22, r18
    2578:	4a e0       	ldi	r20, 0x0A	; 10
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	0e 94 45 14 	call	0x288a	; 0x288a <itoa>
   LCD_displayString(buff); /* Display the string */
    2580:	ce 01       	movw	r24, r28
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	0e 94 26 12 	call	0x244c	; 0x244c <LCD_displayString>
}
    2588:	62 96       	adiw	r28, 0x12	; 18
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>
}
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <UART_init>:
#include <avr/io.h>
#include "uart.h"
#include "common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <UART_init+0x6>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <UART_init+0x8>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9c 83       	std	Y+4, r25	; 0x04
    25bc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value;

	UCSRA = (1<<U2X);
    25be:	eb e2       	ldi	r30, 0x2B	; 43
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	80 83       	st	Z, r24

	UCSRB= (1<<TXEN) | (1<<RXEN)
    25c6:	aa e2       	ldi	r26, 0x2A	; 42
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	eb 81       	ldd	r30, Y+3	; 0x03
    25cc:	fc 81       	ldd	r31, Y+4	; 0x04
    25ce:	80 81       	ld	r24, Z
    25d0:	84 70       	andi	r24, 0x04	; 4
    25d2:	88 61       	ori	r24, 0x18	; 24
    25d4:	8c 93       	st	X, r24

		 | ( GET_BIT((Config_Ptr->bit_data) ,2 ) <<UCSZ2);

	UCSRC= (1<<URSEL)
    25d6:	a0 e4       	ldi	r26, 0x40	; 64
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	eb 81       	ldd	r30, Y+3	; 0x03
    25dc:	fc 81       	ldd	r31, Y+4	; 0x04
    25de:	80 81       	ld	r24, Z
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	81 70       	andi	r24, 0x01	; 1
    25e6:	90 70       	andi	r25, 0x00	; 0
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	28 2f       	mov	r18, r24
    25ee:	20 68       	ori	r18, 0x80	; 128
    25f0:	eb 81       	ldd	r30, Y+3	; 0x03
    25f2:	fc 81       	ldd	r31, Y+4	; 0x04
    25f4:	80 81       	ld	r24, Z
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	82 70       	andi	r24, 0x02	; 2
    25fc:	90 70       	andi	r25, 0x00	; 0
    25fe:	95 95       	asr	r25
    2600:	87 95       	ror	r24
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	28 2b       	or	r18, r24
    260c:	eb 81       	ldd	r30, Y+3	; 0x03
    260e:	fc 81       	ldd	r31, Y+4	; 0x04
    2610:	81 81       	ldd	r24, Z+1	; 0x01
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	81 70       	andi	r24, 0x01	; 1
    2618:	90 70       	andi	r25, 0x00	; 0
    261a:	82 95       	swap	r24
    261c:	92 95       	swap	r25
    261e:	90 7f       	andi	r25, 0xF0	; 240
    2620:	98 27       	eor	r25, r24
    2622:	80 7f       	andi	r24, 0xF0	; 240
    2624:	98 27       	eor	r25, r24
    2626:	28 2b       	or	r18, r24
    2628:	eb 81       	ldd	r30, Y+3	; 0x03
    262a:	fc 81       	ldd	r31, Y+4	; 0x04
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	88 2f       	mov	r24, r24
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	82 70       	andi	r24, 0x02	; 2
    2634:	90 70       	andi	r25, 0x00	; 0
    2636:	95 95       	asr	r25
    2638:	87 95       	ror	r24
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	82 95       	swap	r24
    2640:	92 95       	swap	r25
    2642:	90 7f       	andi	r25, 0xF0	; 240
    2644:	98 27       	eor	r25, r24
    2646:	80 7f       	andi	r24, 0xF0	; 240
    2648:	98 27       	eor	r25, r24
    264a:	28 2b       	or	r18, r24
    264c:	eb 81       	ldd	r30, Y+3	; 0x03
    264e:	fc 81       	ldd	r31, Y+4	; 0x04
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	88 0f       	add	r24, r24
    265c:	99 1f       	adc	r25, r25
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	82 2b       	or	r24, r18
    2664:	8c 93       	st	X, r24
		   | (GET_BIT((Config_Ptr->parity) , 1)<< UPM1)

	       | ((Config_Ptr->stop_bit) << USBS);


	ubrr_value=(uint16) ((F_CPU / ((Config_Ptr->baud_rate)* 8UL)) -1);
    2666:	eb 81       	ldd	r30, Y+3	; 0x03
    2668:	fc 81       	ldd	r31, Y+4	; 0x04
    266a:	83 81       	ldd	r24, Z+3	; 0x03
    266c:	94 81       	ldd	r25, Z+4	; 0x04
    266e:	cc 01       	movw	r24, r24
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	aa 1f       	adc	r26, r26
    267a:	bb 1f       	adc	r27, r27
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	aa 1f       	adc	r26, r26
    2682:	bb 1f       	adc	r27, r27
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	aa 1f       	adc	r26, r26
    268a:	bb 1f       	adc	r27, r27
    268c:	9c 01       	movw	r18, r24
    268e:	ad 01       	movw	r20, r26
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	92 e1       	ldi	r25, 0x12	; 18
    2694:	aa e7       	ldi	r26, 0x7A	; 122
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__udivmodsi4>
    26a0:	da 01       	movw	r26, r20
    26a2:	c9 01       	movw	r24, r18
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01

	UBRRH =ubrr_value>>8;
    26aa:	e0 e4       	ldi	r30, 0x40	; 64
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	89 2f       	mov	r24, r25
    26b4:	99 27       	eor	r25, r25
    26b6:	80 83       	st	Z, r24
	UBRRL =ubrr_value;
    26b8:	e9 e2       	ldi	r30, 0x29	; 41
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	80 83       	st	Z, r24
}
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	0f 92       	push	r0
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26da:	eb e2       	ldi	r30, 0x2B	; 43
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	80 72       	andi	r24, 0x20	; 32
    26e6:	90 70       	andi	r25, 0x00	; 0
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	b9 f3       	breq	.-18     	; 0x26da <UART_sendByte+0xc>

	UDR=data;
    26ec:	ec e2       	ldi	r30, 0x2C	; 44
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	80 83       	st	Z, r24
}
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2704:	eb e2       	ldi	r30, 0x2B	; 43
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	88 23       	and	r24, r24
    270c:	dc f7       	brge	.-10     	; 0x2704 <UART_recieveByte+0x8>

	return UDR;
    270e:	ec e2       	ldi	r30, 0x2C	; 44
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
}
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <UART_sendString>:


void UART_sendString(const uint8 *str)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <UART_sendString+0x6>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	0a c0       	rjmp	.+20     	; 0x273e <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
    272a:	e9 81       	ldd	r30, Y+1	; 0x01
    272c:	fa 81       	ldd	r31, Y+2	; 0x02
    272e:	80 81       	ld	r24, Z
    2730:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_sendByte>
		str++;
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
}


void UART_sendString(const uint8 *str)
{
	while(*str != '\0')
    273e:	e9 81       	ldd	r30, Y+1	; 0x01
    2740:	fa 81       	ldd	r31, Y+2	; 0x02
    2742:	80 81       	ld	r24, Z
    2744:	88 23       	and	r24, r24
    2746:	89 f7       	brne	.-30     	; 0x272a <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <UART_receiveString>:


void UART_receiveString(uint8 *str)
{
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <UART_receiveString+0xa>
    275c:	0f 92       	push	r0
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	9b 83       	std	Y+3, r25	; 0x03
    2764:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2766:	19 82       	std	Y+1, r1	; 0x01

	str[i]=UART_recieveByte();
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	9b 81       	ldd	r25, Y+3	; 0x03
    2772:	8c 01       	movw	r16, r24
    2774:	02 0f       	add	r16, r18
    2776:	13 1f       	adc	r17, r19
    2778:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    277c:	f8 01       	movw	r30, r16
    277e:	80 83       	st	Z, r24
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <UART_receiveString+0x4e>

	while(str[i] != '#')
	{
		i++;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_recieveByte();
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	8c 01       	movw	r16, r24
    2794:	02 0f       	add	r16, r18
    2796:	13 1f       	adc	r17, r19
    2798:	0e 94 7e 13 	call	0x26fc	; 0x26fc <UART_recieveByte>
    279c:	f8 01       	movw	r30, r16
    279e:	80 83       	st	Z, r24
{
	uint8 i=0;

	str[i]=UART_recieveByte();

	while(str[i] != '#')
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	9b 81       	ldd	r25, Y+3	; 0x03
    27aa:	fc 01       	movw	r30, r24
    27ac:	e2 0f       	add	r30, r18
    27ae:	f3 1f       	adc	r31, r19
    27b0:	80 81       	ld	r24, Z
    27b2:	83 32       	cpi	r24, 0x23	; 35
    27b4:	31 f7       	brne	.-52     	; 0x2782 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_recieveByte();
	}
	str[i]='\0';
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	9b 81       	ldd	r25, Y+3	; 0x03
    27c0:	fc 01       	movw	r30, r24
    27c2:	e2 0f       	add	r30, r18
    27c4:	f3 1f       	adc	r31, r19
    27c6:	10 82       	st	Z, r1
}
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	08 95       	ret

000027d8 <__udivmodsi4>:
    27d8:	a1 e2       	ldi	r26, 0x21	; 33
    27da:	1a 2e       	mov	r1, r26
    27dc:	aa 1b       	sub	r26, r26
    27de:	bb 1b       	sub	r27, r27
    27e0:	fd 01       	movw	r30, r26
    27e2:	0d c0       	rjmp	.+26     	; 0x27fe <__udivmodsi4_ep>

000027e4 <__udivmodsi4_loop>:
    27e4:	aa 1f       	adc	r26, r26
    27e6:	bb 1f       	adc	r27, r27
    27e8:	ee 1f       	adc	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	a2 17       	cp	r26, r18
    27ee:	b3 07       	cpc	r27, r19
    27f0:	e4 07       	cpc	r30, r20
    27f2:	f5 07       	cpc	r31, r21
    27f4:	20 f0       	brcs	.+8      	; 0x27fe <__udivmodsi4_ep>
    27f6:	a2 1b       	sub	r26, r18
    27f8:	b3 0b       	sbc	r27, r19
    27fa:	e4 0b       	sbc	r30, r20
    27fc:	f5 0b       	sbc	r31, r21

000027fe <__udivmodsi4_ep>:
    27fe:	66 1f       	adc	r22, r22
    2800:	77 1f       	adc	r23, r23
    2802:	88 1f       	adc	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	1a 94       	dec	r1
    2808:	69 f7       	brne	.-38     	; 0x27e4 <__udivmodsi4_loop>
    280a:	60 95       	com	r22
    280c:	70 95       	com	r23
    280e:	80 95       	com	r24
    2810:	90 95       	com	r25
    2812:	9b 01       	movw	r18, r22
    2814:	ac 01       	movw	r20, r24
    2816:	bd 01       	movw	r22, r26
    2818:	cf 01       	movw	r24, r30
    281a:	08 95       	ret

0000281c <__prologue_saves__>:
    281c:	2f 92       	push	r2
    281e:	3f 92       	push	r3
    2820:	4f 92       	push	r4
    2822:	5f 92       	push	r5
    2824:	6f 92       	push	r6
    2826:	7f 92       	push	r7
    2828:	8f 92       	push	r8
    282a:	9f 92       	push	r9
    282c:	af 92       	push	r10
    282e:	bf 92       	push	r11
    2830:	cf 92       	push	r12
    2832:	df 92       	push	r13
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	ca 1b       	sub	r28, r26
    2846:	db 0b       	sbc	r29, r27
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	09 94       	ijmp

00002854 <__epilogue_restores__>:
    2854:	2a 88       	ldd	r2, Y+18	; 0x12
    2856:	39 88       	ldd	r3, Y+17	; 0x11
    2858:	48 88       	ldd	r4, Y+16	; 0x10
    285a:	5f 84       	ldd	r5, Y+15	; 0x0f
    285c:	6e 84       	ldd	r6, Y+14	; 0x0e
    285e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2860:	8c 84       	ldd	r8, Y+12	; 0x0c
    2862:	9b 84       	ldd	r9, Y+11	; 0x0b
    2864:	aa 84       	ldd	r10, Y+10	; 0x0a
    2866:	b9 84       	ldd	r11, Y+9	; 0x09
    2868:	c8 84       	ldd	r12, Y+8	; 0x08
    286a:	df 80       	ldd	r13, Y+7	; 0x07
    286c:	ee 80       	ldd	r14, Y+6	; 0x06
    286e:	fd 80       	ldd	r15, Y+5	; 0x05
    2870:	0c 81       	ldd	r16, Y+4	; 0x04
    2872:	1b 81       	ldd	r17, Y+3	; 0x03
    2874:	aa 81       	ldd	r26, Y+2	; 0x02
    2876:	b9 81       	ldd	r27, Y+1	; 0x01
    2878:	ce 0f       	add	r28, r30
    287a:	d1 1d       	adc	r29, r1
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	ed 01       	movw	r28, r26
    2888:	08 95       	ret

0000288a <itoa>:
    288a:	fb 01       	movw	r30, r22
    288c:	9f 01       	movw	r18, r30
    288e:	e8 94       	clt
    2890:	42 30       	cpi	r20, 0x02	; 2
    2892:	c4 f0       	brlt	.+48     	; 0x28c4 <itoa+0x3a>
    2894:	45 32       	cpi	r20, 0x25	; 37
    2896:	b4 f4       	brge	.+44     	; 0x28c4 <itoa+0x3a>
    2898:	4a 30       	cpi	r20, 0x0A	; 10
    289a:	29 f4       	brne	.+10     	; 0x28a6 <itoa+0x1c>
    289c:	97 fb       	bst	r25, 7
    289e:	1e f4       	brtc	.+6      	; 0x28a6 <itoa+0x1c>
    28a0:	90 95       	com	r25
    28a2:	81 95       	neg	r24
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	64 2f       	mov	r22, r20
    28a8:	77 27       	eor	r23, r23
    28aa:	0e 94 76 14 	call	0x28ec	; 0x28ec <__udivmodhi4>
    28ae:	80 5d       	subi	r24, 0xD0	; 208
    28b0:	8a 33       	cpi	r24, 0x3A	; 58
    28b2:	0c f0       	brlt	.+2      	; 0x28b6 <itoa+0x2c>
    28b4:	89 5d       	subi	r24, 0xD9	; 217
    28b6:	81 93       	st	Z+, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	a1 f7       	brne	.-24     	; 0x28a6 <itoa+0x1c>
    28be:	16 f4       	brtc	.+4      	; 0x28c4 <itoa+0x3a>
    28c0:	5d e2       	ldi	r21, 0x2D	; 45
    28c2:	51 93       	st	Z+, r21
    28c4:	10 82       	st	Z, r1
    28c6:	c9 01       	movw	r24, r18
    28c8:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <strrev>

000028cc <strrev>:
    28cc:	dc 01       	movw	r26, r24
    28ce:	fc 01       	movw	r30, r24
    28d0:	67 2f       	mov	r22, r23
    28d2:	71 91       	ld	r23, Z+
    28d4:	77 23       	and	r23, r23
    28d6:	e1 f7       	brne	.-8      	; 0x28d0 <strrev+0x4>
    28d8:	32 97       	sbiw	r30, 0x02	; 2
    28da:	04 c0       	rjmp	.+8      	; 0x28e4 <strrev+0x18>
    28dc:	7c 91       	ld	r23, X
    28de:	6d 93       	st	X+, r22
    28e0:	70 83       	st	Z, r23
    28e2:	62 91       	ld	r22, -Z
    28e4:	ae 17       	cp	r26, r30
    28e6:	bf 07       	cpc	r27, r31
    28e8:	c8 f3       	brcs	.-14     	; 0x28dc <strrev+0x10>
    28ea:	08 95       	ret

000028ec <__udivmodhi4>:
    28ec:	aa 1b       	sub	r26, r26
    28ee:	bb 1b       	sub	r27, r27
    28f0:	51 e1       	ldi	r21, 0x11	; 17
    28f2:	07 c0       	rjmp	.+14     	; 0x2902 <__udivmodhi4_ep>

000028f4 <__udivmodhi4_loop>:
    28f4:	aa 1f       	adc	r26, r26
    28f6:	bb 1f       	adc	r27, r27
    28f8:	a6 17       	cp	r26, r22
    28fa:	b7 07       	cpc	r27, r23
    28fc:	10 f0       	brcs	.+4      	; 0x2902 <__udivmodhi4_ep>
    28fe:	a6 1b       	sub	r26, r22
    2900:	b7 0b       	sbc	r27, r23

00002902 <__udivmodhi4_ep>:
    2902:	88 1f       	adc	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	5a 95       	dec	r21
    2908:	a9 f7       	brne	.-22     	; 0x28f4 <__udivmodhi4_loop>
    290a:	80 95       	com	r24
    290c:	90 95       	com	r25
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	08 95       	ret

00002914 <_exit>:
    2914:	f8 94       	cli

00002916 <__stop_program>:
    2916:	ff cf       	rjmp	.-2      	; 0x2916 <__stop_program>
