
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002a22  00002ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800174  00800174  00002bca  2**0
                  ALLOC
  3 .stab         00002a90  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001352  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000069ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000914b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c4cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
#include "uart.h"
#include "twi.h"
#include <avr/io.h>

void main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	67 97       	sbiw	r28, 0x17	; 23
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	/* I2C configuration pointer */
	TWI_ConfigType TWI_Config_Ptr={FOUR_HAUNDRED_KBITS_S,FIRST};
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	8a 83       	std	Y+2, r24	; 0x02

	/* UART configuration pointer */
	UART_ConfigType U_Config_Ptr={EIGHT_BIT , DISABLE_PARITY , ONE_STOP_BIT , BAUD9600};
     e4a:	ce 01       	movw	r24, r28
     e4c:	03 96       	adiw	r24, 0x03	; 3
     e4e:	9f 87       	std	Y+15, r25	; 0x0f
     e50:	8e 87       	std	Y+14, r24	; 0x0e
     e52:	ee e6       	ldi	r30, 0x6E	; 110
     e54:	f1 e0       	ldi	r31, 0x01	; 1
     e56:	f9 8b       	std	Y+17, r31	; 0x11
     e58:	e8 8b       	std	Y+16, r30	; 0x10
     e5a:	f5 e0       	ldi	r31, 0x05	; 5
     e5c:	fa 8b       	std	Y+18, r31	; 0x12
     e5e:	e8 89       	ldd	r30, Y+16	; 0x10
     e60:	f9 89       	ldd	r31, Y+17	; 0x11
     e62:	00 80       	ld	r0, Z
     e64:	88 89       	ldd	r24, Y+16	; 0x10
     e66:	99 89       	ldd	r25, Y+17	; 0x11
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	99 8b       	std	Y+17, r25	; 0x11
     e6c:	88 8b       	std	Y+16, r24	; 0x10
     e6e:	ee 85       	ldd	r30, Y+14	; 0x0e
     e70:	ff 85       	ldd	r31, Y+15	; 0x0f
     e72:	00 82       	st	Z, r0
     e74:	8e 85       	ldd	r24, Y+14	; 0x0e
     e76:	9f 85       	ldd	r25, Y+15	; 0x0f
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	9f 87       	std	Y+15, r25	; 0x0f
     e7c:	8e 87       	std	Y+14, r24	; 0x0e
     e7e:	9a 89       	ldd	r25, Y+18	; 0x12
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	9a 8b       	std	Y+18, r25	; 0x12
     e84:	ea 89       	ldd	r30, Y+18	; 0x12
     e86:	ee 23       	and	r30, r30
     e88:	51 f7       	brne	.-44     	; 0xe5e <main+0x30>

	/* Timer1 configuration pointer */
	Timer1_ConfigType Timer1_Config_Ptr={0,7300,F_CPU_1024,CTC};/*  7000 -> SECOUND */
     e8a:	ce 01       	movw	r24, r28
     e8c:	08 96       	adiw	r24, 0x08	; 8
     e8e:	9c 8b       	std	Y+20, r25	; 0x14
     e90:	8b 8b       	std	Y+19, r24	; 0x13
     e92:	e8 e6       	ldi	r30, 0x68	; 104
     e94:	f1 e0       	ldi	r31, 0x01	; 1
     e96:	fe 8b       	std	Y+22, r31	; 0x16
     e98:	ed 8b       	std	Y+21, r30	; 0x15
     e9a:	f6 e0       	ldi	r31, 0x06	; 6
     e9c:	ff 8b       	std	Y+23, r31	; 0x17
     e9e:	ed 89       	ldd	r30, Y+21	; 0x15
     ea0:	fe 89       	ldd	r31, Y+22	; 0x16
     ea2:	00 80       	ld	r0, Z
     ea4:	8d 89       	ldd	r24, Y+21	; 0x15
     ea6:	9e 89       	ldd	r25, Y+22	; 0x16
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	9e 8b       	std	Y+22, r25	; 0x16
     eac:	8d 8b       	std	Y+21, r24	; 0x15
     eae:	eb 89       	ldd	r30, Y+19	; 0x13
     eb0:	fc 89       	ldd	r31, Y+20	; 0x14
     eb2:	00 82       	st	Z, r0
     eb4:	8b 89       	ldd	r24, Y+19	; 0x13
     eb6:	9c 89       	ldd	r25, Y+20	; 0x14
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	9c 8b       	std	Y+20, r25	; 0x14
     ebc:	8b 8b       	std	Y+19, r24	; 0x13
     ebe:	9f 89       	ldd	r25, Y+23	; 0x17
     ec0:	91 50       	subi	r25, 0x01	; 1
     ec2:	9f 8b       	std	Y+23, r25	; 0x17
     ec4:	ef 89       	ldd	r30, Y+23	; 0x17
     ec6:	ee 23       	and	r30, r30
     ec8:	51 f7       	brne	.-44     	; 0xe9e <main+0x70>

	/*Setup UART */
	UART_init(&U_Config_Ptr);
     eca:	ce 01       	movw	r24, r28
     ecc:	03 96       	adiw	r24, 0x03	; 3
     ece:	0e 94 a1 13 	call	0x2742	; 0x2742 <UART_init>

	/*Setup UART */
	Buzzer_init();
     ed2:	0e 94 85 07 	call	0xf0a	; 0xf0a <Buzzer_init>

	/*Setup I2C */
	TWI_init(&TWI_Config_Ptr);
     ed6:	ce 01       	movw	r24, r28
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	0e 94 19 13 	call	0x2632	; 0x2632 <TWI_init>

	/* Setup DC Motor */
	DcMotor_Init();
     ede:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DcMotor_Init>

	/*Setup Timer1  */
	Timer1_init(&Timer1_Config_Ptr);
     ee2:	ce 01       	movw	r24, r28
     ee4:	08 96       	adiw	r24, 0x08	; 8
     ee6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <Timer1_init>

	/* Turn on Timer1 */
	Timer1_setCallBack(TIMER1_COUNTER);
     eea:	8e ea       	ldi	r24, 0xAE	; 174
     eec:	97 e0       	ldi	r25, 0x07	; 7
     eee:	0e 94 07 13 	call	0x260e	; 0x260e <Timer1_setCallBack>

	/* To use Timer1  ISR */
	SREG |= (1<<7);
     ef2:	af e5       	ldi	r26, 0x5F	; 95
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ef e5       	ldi	r30, 0x5F	; 95
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	8c 93       	st	X, r24


	for(;;)
	{
		/* Create system password */
		CREAT_pass();
     f00:	0e 94 be 07 	call	0xf7c	; 0xf7c <CREAT_pass>
		/* Display main option */
		MAIN_option();
     f04:	0e 94 65 0a 	call	0x14ca	; 0x14ca <MAIN_option>
     f08:	fb cf       	rjmp	.-10     	; 0xf00 <main+0xd2>

00000f0a <Buzzer_init>:
#include "gpio.h"

/*  Function responsible for
 *  Setup buzzer pins*/
void Buzzer_init(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
}
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <Buzzer_on>:

/*  Function responsible for
 * Turn on buzzer*/
void Buzzer_on(void)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <Buzzer_off>:


/*  Function responsible for
 * Turn off buzzer*/
void Buzzer_off(void)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <TIMER1_COUNTER>:
/*
 * Function responsible for
 * count seconds
 */
void TIMER1_COUNTER(void)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     f64:	80 91 74 01 	lds	r24, 0x0174
     f68:	90 91 75 01 	lds	r25, 0x0175
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	90 93 75 01 	sts	0x0175, r25
     f72:	80 93 74 01 	sts	0x0174, r24
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <CREAT_pass>:
 * receive created and confirm password
 * from HMI_ECU and store it in EEPROM
 * if the two are matched
 */
void  CREAT_pass(void)
{
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	c6 54       	subi	r28, 0x46	; 70
     f8a:	d0 40       	sbci	r29, 0x00	; 0
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
	 *                               STEP 1                                        *
	 *******************************************************************************/
	/* Create a System Password */


	RECEIVE_pass(g_pass);      /* Receive created password */
     f96:	89 e7       	ldi	r24, 0x79	; 121
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <RECEIVE_pass>


	RECEIVE_pass(g_re_pass);   /* Receive confirmed password */
     f9e:	8e e7       	ldi	r24, 0x7E	; 126
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <RECEIVE_pass>


	UART_sendByte(IS_passMatch(g_pass,g_re_pass)); /* Send the compare result to HMI_ECU*/
     fa6:	89 e7       	ldi	r24, 0x79	; 121
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	2e e7       	ldi	r18, 0x7E	; 126
     fac:	31 e0       	ldi	r19, 0x01	; 1
     fae:	b9 01       	movw	r22, r18
     fb0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <IS_passMatch>
     fb4:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>

	if(IS_passMatch(g_pass,g_re_pass)) /*If two passwords are the same store it in EEPROM*/
     fb8:	89 e7       	ldi	r24, 0x79	; 121
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	2e e7       	ldi	r18, 0x7E	; 126
     fbe:	31 e0       	ldi	r19, 0x01	; 1
     fc0:	b9 01       	movw	r22, r18
     fc2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <IS_passMatch>
     fc6:	88 23       	and	r24, r24
     fc8:	09 f4       	brne	.+2      	; 0xfcc <CREAT_pass+0x50>
     fca:	71 c2       	rjmp	.+1250   	; 0x14ae <CREAT_pass+0x532>
	{
		EEPROM_writeByte(0x1010, g_pass[0]);
     fcc:	20 91 79 01 	lds	r18, 0x0179
     fd0:	80 e1       	ldi	r24, 0x10	; 16
     fd2:	90 e1       	ldi	r25, 0x10	; 16
     fd4:	62 2f       	mov	r22, r18
     fd6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <EEPROM_writeByte>
     fda:	fe 01       	movw	r30, r28
     fdc:	ed 5b       	subi	r30, 0xBD	; 189
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e2       	ldi	r26, 0x20	; 32
     fe6:	b1 e4       	ldi	r27, 0x41	; 65
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	8e 01       	movw	r16, r28
     ff2:	01 5c       	subi	r16, 0xC1	; 193
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	ed 5b       	subi	r30, 0xBD	; 189
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a ef       	ldi	r20, 0xFA	; 250
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101e:	fe 01       	movw	r30, r28
    1020:	ff 96       	adiw	r30, 0x3f	; 63
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1036:	88 23       	and	r24, r24
    1038:	2c f4       	brge	.+10     	; 0x1044 <CREAT_pass+0xc8>
		__ticks = 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9e af       	std	Y+62, r25	; 0x3e
    1040:	8d af       	std	Y+61, r24	; 0x3d
    1042:	46 c0       	rjmp	.+140    	; 0x10d0 <CREAT_pass+0x154>
	else if (__tmp > 65535)
    1044:	fe 01       	movw	r30, r28
    1046:	ff 96       	adiw	r30, 0x3f	; 63
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    105c:	18 16       	cp	r1, r24
    105e:	64 f5       	brge	.+88     	; 0x10b8 <CREAT_pass+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1060:	fe 01       	movw	r30, r28
    1062:	ed 5b       	subi	r30, 0xBD	; 189
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e af       	std	Y+62, r25	; 0x3e
    108c:	8d af       	std	Y+61, r24	; 0x3d
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <CREAT_pass+0x132>
    1090:	88 ec       	ldi	r24, 0xC8	; 200
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9c af       	std	Y+60, r25	; 0x3c
    1096:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1098:	8b ad       	ldd	r24, Y+59	; 0x3b
    109a:	9c ad       	ldd	r25, Y+60	; 0x3c
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <CREAT_pass+0x120>
    10a0:	9c af       	std	Y+60, r25	; 0x3c
    10a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9e af       	std	Y+62, r25	; 0x3e
    10ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	69 f7       	brne	.-38     	; 0x1090 <CREAT_pass+0x114>
    10b6:	16 c0       	rjmp	.+44     	; 0x10e4 <CREAT_pass+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b8:	fe 01       	movw	r30, r28
    10ba:	ff 96       	adiw	r30, 0x3f	; 63
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9e af       	std	Y+62, r25	; 0x3e
    10ce:	8d af       	std	Y+61, r24	; 0x3d
    10d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    10d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    10d4:	9a af       	std	Y+58, r25	; 0x3a
    10d6:	89 af       	std	Y+57, r24	; 0x39
    10d8:	89 ad       	ldd	r24, Y+57	; 0x39
    10da:	9a ad       	ldd	r25, Y+58	; 0x3a
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <CREAT_pass+0x160>
    10e0:	9a af       	std	Y+58, r25	; 0x3a
    10e2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		EEPROM_writeByte(0x2020, g_pass[1]);
    10e4:	20 91 7a 01 	lds	r18, 0x017A
    10e8:	80 e2       	ldi	r24, 0x20	; 32
    10ea:	90 e2       	ldi	r25, 0x20	; 32
    10ec:	62 2f       	mov	r22, r18
    10ee:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <EEPROM_writeByte>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a0 e2       	ldi	r26, 0x20	; 32
    10f8:	b1 e4       	ldi	r27, 0x41	; 65
    10fa:	8d ab       	std	Y+53, r24	; 0x35
    10fc:	9e ab       	std	Y+54, r25	; 0x36
    10fe:	af ab       	std	Y+55, r26	; 0x37
    1100:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1102:	6d a9       	ldd	r22, Y+53	; 0x35
    1104:	7e a9       	ldd	r23, Y+54	; 0x36
    1106:	8f a9       	ldd	r24, Y+55	; 0x37
    1108:	98 ad       	ldd	r25, Y+56	; 0x38
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a ef       	ldi	r20, 0xFA	; 250
    1110:	54 e4       	ldi	r21, 0x44	; 68
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	89 ab       	std	Y+49, r24	; 0x31
    111c:	9a ab       	std	Y+50, r25	; 0x32
    111e:	ab ab       	std	Y+51, r26	; 0x33
    1120:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1122:	69 a9       	ldd	r22, Y+49	; 0x31
    1124:	7a a9       	ldd	r23, Y+50	; 0x32
    1126:	8b a9       	ldd	r24, Y+51	; 0x33
    1128:	9c a9       	ldd	r25, Y+52	; 0x34
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1136:	88 23       	and	r24, r24
    1138:	2c f4       	brge	.+10     	; 0x1144 <CREAT_pass+0x1c8>
		__ticks = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	98 ab       	std	Y+48, r25	; 0x30
    1140:	8f a7       	std	Y+47, r24	; 0x2f
    1142:	3f c0       	rjmp	.+126    	; 0x11c2 <CREAT_pass+0x246>
	else if (__tmp > 65535)
    1144:	69 a9       	ldd	r22, Y+49	; 0x31
    1146:	7a a9       	ldd	r23, Y+50	; 0x32
    1148:	8b a9       	ldd	r24, Y+51	; 0x33
    114a:	9c a9       	ldd	r25, Y+52	; 0x34
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	57 e4       	ldi	r21, 0x47	; 71
    1154:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1158:	18 16       	cp	r1, r24
    115a:	4c f5       	brge	.+82     	; 0x11ae <CREAT_pass+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115c:	6d a9       	ldd	r22, Y+53	; 0x35
    115e:	7e a9       	ldd	r23, Y+54	; 0x36
    1160:	8f a9       	ldd	r24, Y+55	; 0x37
    1162:	98 ad       	ldd	r25, Y+56	; 0x38
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e2       	ldi	r20, 0x20	; 32
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	bc 01       	movw	r22, r24
    1176:	cd 01       	movw	r24, r26
    1178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	98 ab       	std	Y+48, r25	; 0x30
    1182:	8f a7       	std	Y+47, r24	; 0x2f
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <CREAT_pass+0x228>
    1186:	88 ec       	ldi	r24, 0xC8	; 200
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9e a7       	std	Y+46, r25	; 0x2e
    118c:	8d a7       	std	Y+45, r24	; 0x2d
    118e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1190:	9e a5       	ldd	r25, Y+46	; 0x2e
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <CREAT_pass+0x216>
    1196:	9e a7       	std	Y+46, r25	; 0x2e
    1198:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119a:	8f a5       	ldd	r24, Y+47	; 0x2f
    119c:	98 a9       	ldd	r25, Y+48	; 0x30
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	98 ab       	std	Y+48, r25	; 0x30
    11a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a6:	98 a9       	ldd	r25, Y+48	; 0x30
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	69 f7       	brne	.-38     	; 0x1186 <CREAT_pass+0x20a>
    11ac:	14 c0       	rjmp	.+40     	; 0x11d6 <CREAT_pass+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ae:	69 a9       	ldd	r22, Y+49	; 0x31
    11b0:	7a a9       	ldd	r23, Y+50	; 0x32
    11b2:	8b a9       	ldd	r24, Y+51	; 0x33
    11b4:	9c a9       	ldd	r25, Y+52	; 0x34
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	98 ab       	std	Y+48, r25	; 0x30
    11c0:	8f a7       	std	Y+47, r24	; 0x2f
    11c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c4:	98 a9       	ldd	r25, Y+48	; 0x30
    11c6:	9c a7       	std	Y+44, r25	; 0x2c
    11c8:	8b a7       	std	Y+43, r24	; 0x2b
    11ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    11cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <CREAT_pass+0x252>
    11d2:	9c a7       	std	Y+44, r25	; 0x2c
    11d4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		EEPROM_writeByte(0x3030, g_pass[2]);
    11d6:	20 91 7b 01 	lds	r18, 0x017B
    11da:	80 e3       	ldi	r24, 0x30	; 48
    11dc:	90 e3       	ldi	r25, 0x30	; 48
    11de:	62 2f       	mov	r22, r18
    11e0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <EEPROM_writeByte>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a0 e2       	ldi	r26, 0x20	; 32
    11ea:	b1 e4       	ldi	r27, 0x41	; 65
    11ec:	8f a3       	std	Y+39, r24	; 0x27
    11ee:	98 a7       	std	Y+40, r25	; 0x28
    11f0:	a9 a7       	std	Y+41, r26	; 0x29
    11f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6f a1       	ldd	r22, Y+39	; 0x27
    11f6:	78 a5       	ldd	r23, Y+40	; 0x28
    11f8:	89 a5       	ldd	r24, Y+41	; 0x29
    11fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8b a3       	std	Y+35, r24	; 0x23
    120e:	9c a3       	std	Y+36, r25	; 0x24
    1210:	ad a3       	std	Y+37, r26	; 0x25
    1212:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1214:	6b a1       	ldd	r22, Y+35	; 0x23
    1216:	7c a1       	ldd	r23, Y+36	; 0x24
    1218:	8d a1       	ldd	r24, Y+37	; 0x25
    121a:	9e a1       	ldd	r25, Y+38	; 0x26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <CREAT_pass+0x2ba>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9a a3       	std	Y+34, r25	; 0x22
    1232:	89 a3       	std	Y+33, r24	; 0x21
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <CREAT_pass+0x338>
	else if (__tmp > 65535)
    1236:	6b a1       	ldd	r22, Y+35	; 0x23
    1238:	7c a1       	ldd	r23, Y+36	; 0x24
    123a:	8d a1       	ldd	r24, Y+37	; 0x25
    123c:	9e a1       	ldd	r25, Y+38	; 0x26
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <CREAT_pass+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6f a1       	ldd	r22, Y+39	; 0x27
    1250:	78 a5       	ldd	r23, Y+40	; 0x28
    1252:	89 a5       	ldd	r24, Y+41	; 0x29
    1254:	9a a5       	ldd	r25, Y+42	; 0x2a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9a a3       	std	Y+34, r25	; 0x22
    1274:	89 a3       	std	Y+33, r24	; 0x21
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <CREAT_pass+0x31a>
    1278:	88 ec       	ldi	r24, 0xC8	; 200
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1282:	98 a1       	ldd	r25, Y+32	; 0x20
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <CREAT_pass+0x308>
    1288:	98 a3       	std	Y+32, r25	; 0x20
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	89 a1       	ldd	r24, Y+33	; 0x21
    128e:	9a a1       	ldd	r25, Y+34	; 0x22
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	89 a1       	ldd	r24, Y+33	; 0x21
    1298:	9a a1       	ldd	r25, Y+34	; 0x22
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <CREAT_pass+0x2fc>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <CREAT_pass+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	6b a1       	ldd	r22, Y+35	; 0x23
    12a2:	7c a1       	ldd	r23, Y+36	; 0x24
    12a4:	8d a1       	ldd	r24, Y+37	; 0x25
    12a6:	9e a1       	ldd	r25, Y+38	; 0x26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9a a3       	std	Y+34, r25	; 0x22
    12b2:	89 a3       	std	Y+33, r24	; 0x21
    12b4:	89 a1       	ldd	r24, Y+33	; 0x21
    12b6:	9a a1       	ldd	r25, Y+34	; 0x22
    12b8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ba:	8d 8f       	std	Y+29, r24	; 0x1d
    12bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <CREAT_pass+0x344>
    12c4:	9e 8f       	std	Y+30, r25	; 0x1e
    12c6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		EEPROM_writeByte(0x4040, g_pass[3]);
    12c8:	20 91 7c 01 	lds	r18, 0x017C
    12cc:	80 e4       	ldi	r24, 0x40	; 64
    12ce:	90 e4       	ldi	r25, 0x40	; 64
    12d0:	62 2f       	mov	r22, r18
    12d2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <EEPROM_writeByte>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a0 e2       	ldi	r26, 0x20	; 32
    12dc:	b1 e4       	ldi	r27, 0x41	; 65
    12de:	89 8f       	std	Y+25, r24	; 0x19
    12e0:	9a 8f       	std	Y+26, r25	; 0x1a
    12e2:	ab 8f       	std	Y+27, r26	; 0x1b
    12e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	69 8d       	ldd	r22, Y+25	; 0x19
    12e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	4a ef       	ldi	r20, 0xFA	; 250
    12f4:	54 e4       	ldi	r21, 0x44	; 68
    12f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	8d 8b       	std	Y+21, r24	; 0x15
    1300:	9e 8b       	std	Y+22, r25	; 0x16
    1302:	af 8b       	std	Y+23, r26	; 0x17
    1304:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1306:	6d 89       	ldd	r22, Y+21	; 0x15
    1308:	7e 89       	ldd	r23, Y+22	; 0x16
    130a:	8f 89       	ldd	r24, Y+23	; 0x17
    130c:	98 8d       	ldd	r25, Y+24	; 0x18
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	5f e3       	ldi	r21, 0x3F	; 63
    1316:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131a:	88 23       	and	r24, r24
    131c:	2c f4       	brge	.+10     	; 0x1328 <CREAT_pass+0x3ac>
		__ticks = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9c 8b       	std	Y+20, r25	; 0x14
    1324:	8b 8b       	std	Y+19, r24	; 0x13
    1326:	3f c0       	rjmp	.+126    	; 0x13a6 <CREAT_pass+0x42a>
	else if (__tmp > 65535)
    1328:	6d 89       	ldd	r22, Y+21	; 0x15
    132a:	7e 89       	ldd	r23, Y+22	; 0x16
    132c:	8f 89       	ldd	r24, Y+23	; 0x17
    132e:	98 8d       	ldd	r25, Y+24	; 0x18
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	3f ef       	ldi	r19, 0xFF	; 255
    1334:	4f e7       	ldi	r20, 0x7F	; 127
    1336:	57 e4       	ldi	r21, 0x47	; 71
    1338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    133c:	18 16       	cp	r1, r24
    133e:	4c f5       	brge	.+82     	; 0x1392 <CREAT_pass+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1340:	69 8d       	ldd	r22, Y+25	; 0x19
    1342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e2       	ldi	r20, 0x20	; 32
    134e:	51 e4       	ldi	r21, 0x41	; 65
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9c 8b       	std	Y+20, r25	; 0x14
    1366:	8b 8b       	std	Y+19, r24	; 0x13
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <CREAT_pass+0x40c>
    136a:	88 ec       	ldi	r24, 0xC8	; 200
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9a 8b       	std	Y+18, r25	; 0x12
    1370:	89 8b       	std	Y+17, r24	; 0x11
    1372:	89 89       	ldd	r24, Y+17	; 0x11
    1374:	9a 89       	ldd	r25, Y+18	; 0x12
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <CREAT_pass+0x3fa>
    137a:	9a 8b       	std	Y+18, r25	; 0x12
    137c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137e:	8b 89       	ldd	r24, Y+19	; 0x13
    1380:	9c 89       	ldd	r25, Y+20	; 0x14
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9c 8b       	std	Y+20, r25	; 0x14
    1386:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	8b 89       	ldd	r24, Y+19	; 0x13
    138a:	9c 89       	ldd	r25, Y+20	; 0x14
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	69 f7       	brne	.-38     	; 0x136a <CREAT_pass+0x3ee>
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <CREAT_pass+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1392:	6d 89       	ldd	r22, Y+21	; 0x15
    1394:	7e 89       	ldd	r23, Y+22	; 0x16
    1396:	8f 89       	ldd	r24, Y+23	; 0x17
    1398:	98 8d       	ldd	r25, Y+24	; 0x18
    139a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9c 8b       	std	Y+20, r25	; 0x14
    13a4:	8b 8b       	std	Y+19, r24	; 0x13
    13a6:	8b 89       	ldd	r24, Y+19	; 0x13
    13a8:	9c 89       	ldd	r25, Y+20	; 0x14
    13aa:	98 8b       	std	Y+16, r25	; 0x10
    13ac:	8f 87       	std	Y+15, r24	; 0x0f
    13ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b0:	98 89       	ldd	r25, Y+16	; 0x10
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <CREAT_pass+0x436>
    13b6:	98 8b       	std	Y+16, r25	; 0x10
    13b8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		EEPROM_writeByte(0x5050, g_pass[4]);
    13ba:	20 91 7d 01 	lds	r18, 0x017D
    13be:	80 e5       	ldi	r24, 0x50	; 80
    13c0:	90 e5       	ldi	r25, 0x50	; 80
    13c2:	62 2f       	mov	r22, r18
    13c4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <EEPROM_writeByte>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e2       	ldi	r26, 0x20	; 32
    13ce:	b1 e4       	ldi	r27, 0x41	; 65
    13d0:	8b 87       	std	Y+11, r24	; 0x0b
    13d2:	9c 87       	std	Y+12, r25	; 0x0c
    13d4:	ad 87       	std	Y+13, r26	; 0x0d
    13d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13da:	7c 85       	ldd	r23, Y+12	; 0x0c
    13dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13de:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	4a ef       	ldi	r20, 0xFA	; 250
    13e6:	54 e4       	ldi	r21, 0x44	; 68
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8f 83       	std	Y+7, r24	; 0x07
    13f2:	98 87       	std	Y+8, r25	; 0x08
    13f4:	a9 87       	std	Y+9, r26	; 0x09
    13f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <CREAT_pass+0x49e>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <CREAT_pass+0x51c>
	else if (__tmp > 65535)
    141a:	6f 81       	ldd	r22, Y+7	; 0x07
    141c:	78 85       	ldd	r23, Y+8	; 0x08
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <CREAT_pass+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	6b 85       	ldd	r22, Y+11	; 0x0b
    1434:	7c 85       	ldd	r23, Y+12	; 0x0c
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	0f c0       	rjmp	.+30     	; 0x147a <CREAT_pass+0x4fe>
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9c 83       	std	Y+4, r25	; 0x04
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <CREAT_pass+0x4ec>
    146c:	9c 83       	std	Y+4, r25	; 0x04
    146e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <CREAT_pass+0x4e0>
    1482:	17 c0       	rjmp	.+46     	; 0x14b2 <CREAT_pass+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	6f 81       	ldd	r22, Y+7	; 0x07
    1486:	78 85       	ldd	r23, Y+8	; 0x08
    1488:	89 85       	ldd	r24, Y+9	; 0x09
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <CREAT_pass+0x528>
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <CREAT_pass+0x536>
		_delay_ms(10);
	}
	else  /*If two passwords are not the same creat password again */
	{
		CREAT_pass();
    14ae:	0e 94 be 07 	call	0xf7c	; 0xf7c <CREAT_pass>
	}

}
    14b2:	ca 5b       	subi	r28, 0xBA	; 186
    14b4:	df 4f       	sbci	r29, 0xFF	; 255
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <MAIN_option>:
/* Function responsible for
 * receive option from HMI_ECU and do it
 * if password correct
 */
void  MAIN_option(void)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	e9 97       	sbiw	r28, 0x39	; 57
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
	static uint8  trail=0;
	uint8 option=0;
    14de:	19 ae       	std	Y+57, r1	; 0x39
	/*Main Options*/

	/*
	 * Reading password which saved in EEPROM
	 */
	EEPROM_readByte(0x1010, &g_eeprom_pass[0]);
    14e0:	23 e8       	ldi	r18, 0x83	; 131
    14e2:	31 e0       	ldi	r19, 0x01	; 1
    14e4:	80 e1       	ldi	r24, 0x10	; 16
    14e6:	90 e1       	ldi	r25, 0x10	; 16
    14e8:	b9 01       	movw	r22, r18
    14ea:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <EEPROM_readByte>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a0 e2       	ldi	r26, 0x20	; 32
    14f4:	b1 e4       	ldi	r27, 0x41	; 65
    14f6:	8d ab       	std	Y+53, r24	; 0x35
    14f8:	9e ab       	std	Y+54, r25	; 0x36
    14fa:	af ab       	std	Y+55, r26	; 0x37
    14fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1500:	7e a9       	ldd	r23, Y+54	; 0x36
    1502:	8f a9       	ldd	r24, Y+55	; 0x37
    1504:	98 ad       	ldd	r25, Y+56	; 0x38
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	4a ef       	ldi	r20, 0xFA	; 250
    150c:	54 e4       	ldi	r21, 0x44	; 68
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	89 ab       	std	Y+49, r24	; 0x31
    1518:	9a ab       	std	Y+50, r25	; 0x32
    151a:	ab ab       	std	Y+51, r26	; 0x33
    151c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    151e:	69 a9       	ldd	r22, Y+49	; 0x31
    1520:	7a a9       	ldd	r23, Y+50	; 0x32
    1522:	8b a9       	ldd	r24, Y+51	; 0x33
    1524:	9c a9       	ldd	r25, Y+52	; 0x34
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	5f e3       	ldi	r21, 0x3F	; 63
    152e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1532:	88 23       	and	r24, r24
    1534:	2c f4       	brge	.+10     	; 0x1540 <MAIN_option+0x76>
		__ticks = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 ab       	std	Y+48, r25	; 0x30
    153c:	8f a7       	std	Y+47, r24	; 0x2f
    153e:	3f c0       	rjmp	.+126    	; 0x15be <MAIN_option+0xf4>
	else if (__tmp > 65535)
    1540:	69 a9       	ldd	r22, Y+49	; 0x31
    1542:	7a a9       	ldd	r23, Y+50	; 0x32
    1544:	8b a9       	ldd	r24, Y+51	; 0x33
    1546:	9c a9       	ldd	r25, Y+52	; 0x34
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	4f e7       	ldi	r20, 0x7F	; 127
    154e:	57 e4       	ldi	r21, 0x47	; 71
    1550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1554:	18 16       	cp	r1, r24
    1556:	4c f5       	brge	.+82     	; 0x15aa <MAIN_option+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1558:	6d a9       	ldd	r22, Y+53	; 0x35
    155a:	7e a9       	ldd	r23, Y+54	; 0x36
    155c:	8f a9       	ldd	r24, Y+55	; 0x37
    155e:	98 ad       	ldd	r25, Y+56	; 0x38
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e2       	ldi	r20, 0x20	; 32
    1566:	51 e4       	ldi	r21, 0x41	; 65
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	98 ab       	std	Y+48, r25	; 0x30
    157e:	8f a7       	std	Y+47, r24	; 0x2f
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <MAIN_option+0xd6>
    1582:	88 ec       	ldi	r24, 0xC8	; 200
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9e a7       	std	Y+46, r25	; 0x2e
    1588:	8d a7       	std	Y+45, r24	; 0x2d
    158a:	8d a5       	ldd	r24, Y+45	; 0x2d
    158c:	9e a5       	ldd	r25, Y+46	; 0x2e
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <MAIN_option+0xc4>
    1592:	9e a7       	std	Y+46, r25	; 0x2e
    1594:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1596:	8f a5       	ldd	r24, Y+47	; 0x2f
    1598:	98 a9       	ldd	r25, Y+48	; 0x30
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	98 ab       	std	Y+48, r25	; 0x30
    159e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a2:	98 a9       	ldd	r25, Y+48	; 0x30
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	69 f7       	brne	.-38     	; 0x1582 <MAIN_option+0xb8>
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <MAIN_option+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15aa:	69 a9       	ldd	r22, Y+49	; 0x31
    15ac:	7a a9       	ldd	r23, Y+50	; 0x32
    15ae:	8b a9       	ldd	r24, Y+51	; 0x33
    15b0:	9c a9       	ldd	r25, Y+52	; 0x34
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	98 ab       	std	Y+48, r25	; 0x30
    15bc:	8f a7       	std	Y+47, r24	; 0x2f
    15be:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c0:	98 a9       	ldd	r25, Y+48	; 0x30
    15c2:	9c a7       	std	Y+44, r25	; 0x2c
    15c4:	8b a7       	std	Y+43, r24	; 0x2b
    15c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <MAIN_option+0x100>
    15ce:	9c a7       	std	Y+44, r25	; 0x2c
    15d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_readByte(0x2020, &g_eeprom_pass[1]);
    15d2:	24 e8       	ldi	r18, 0x84	; 132
    15d4:	31 e0       	ldi	r19, 0x01	; 1
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	90 e2       	ldi	r25, 0x20	; 32
    15da:	b9 01       	movw	r22, r18
    15dc:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <EEPROM_readByte>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e2       	ldi	r26, 0x20	; 32
    15e6:	b1 e4       	ldi	r27, 0x41	; 65
    15e8:	8f a3       	std	Y+39, r24	; 0x27
    15ea:	98 a7       	std	Y+40, r25	; 0x28
    15ec:	a9 a7       	std	Y+41, r26	; 0x29
    15ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	6f a1       	ldd	r22, Y+39	; 0x27
    15f2:	78 a5       	ldd	r23, Y+40	; 0x28
    15f4:	89 a5       	ldd	r24, Y+41	; 0x29
    15f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a ef       	ldi	r20, 0xFA	; 250
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8b a3       	std	Y+35, r24	; 0x23
    160a:	9c a3       	std	Y+36, r25	; 0x24
    160c:	ad a3       	std	Y+37, r26	; 0x25
    160e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <MAIN_option+0x168>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9a a3       	std	Y+34, r25	; 0x22
    162e:	89 a3       	std	Y+33, r24	; 0x21
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <MAIN_option+0x1e6>
	else if (__tmp > 65535)
    1632:	6b a1       	ldd	r22, Y+35	; 0x23
    1634:	7c a1       	ldd	r23, Y+36	; 0x24
    1636:	8d a1       	ldd	r24, Y+37	; 0x25
    1638:	9e a1       	ldd	r25, Y+38	; 0x26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <MAIN_option+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	6f a1       	ldd	r22, Y+39	; 0x27
    164c:	78 a5       	ldd	r23, Y+40	; 0x28
    164e:	89 a5       	ldd	r24, Y+41	; 0x29
    1650:	9a a5       	ldd	r25, Y+42	; 0x2a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9a a3       	std	Y+34, r25	; 0x22
    1670:	89 a3       	std	Y+33, r24	; 0x21
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <MAIN_option+0x1c8>
    1674:	88 ec       	ldi	r24, 0xC8	; 200
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	98 a3       	std	Y+32, r25	; 0x20
    167a:	8f 8f       	std	Y+31, r24	; 0x1f
    167c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    167e:	98 a1       	ldd	r25, Y+32	; 0x20
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <MAIN_option+0x1b6>
    1684:	98 a3       	std	Y+32, r25	; 0x20
    1686:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	89 a1       	ldd	r24, Y+33	; 0x21
    168a:	9a a1       	ldd	r25, Y+34	; 0x22
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9a a3       	std	Y+34, r25	; 0x22
    1690:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	89 a1       	ldd	r24, Y+33	; 0x21
    1694:	9a a1       	ldd	r25, Y+34	; 0x22
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <MAIN_option+0x1aa>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <MAIN_option+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6b a1       	ldd	r22, Y+35	; 0x23
    169e:	7c a1       	ldd	r23, Y+36	; 0x24
    16a0:	8d a1       	ldd	r24, Y+37	; 0x25
    16a2:	9e a1       	ldd	r25, Y+38	; 0x26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9a a3       	std	Y+34, r25	; 0x22
    16ae:	89 a3       	std	Y+33, r24	; 0x21
    16b0:	89 a1       	ldd	r24, Y+33	; 0x21
    16b2:	9a a1       	ldd	r25, Y+34	; 0x22
    16b4:	9e 8f       	std	Y+30, r25	; 0x1e
    16b6:	8d 8f       	std	Y+29, r24	; 0x1d
    16b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <MAIN_option+0x1f2>
    16c0:	9e 8f       	std	Y+30, r25	; 0x1e
    16c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_readByte(0x3030, &g_eeprom_pass[2]);
    16c4:	25 e8       	ldi	r18, 0x85	; 133
    16c6:	31 e0       	ldi	r19, 0x01	; 1
    16c8:	80 e3       	ldi	r24, 0x30	; 48
    16ca:	90 e3       	ldi	r25, 0x30	; 48
    16cc:	b9 01       	movw	r22, r18
    16ce:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <EEPROM_readByte>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e2       	ldi	r26, 0x20	; 32
    16d8:	b1 e4       	ldi	r27, 0x41	; 65
    16da:	89 8f       	std	Y+25, r24	; 0x19
    16dc:	9a 8f       	std	Y+26, r25	; 0x1a
    16de:	ab 8f       	std	Y+27, r26	; 0x1b
    16e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	69 8d       	ldd	r22, Y+25	; 0x19
    16e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a ef       	ldi	r20, 0xFA	; 250
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8d 8b       	std	Y+21, r24	; 0x15
    16fc:	9e 8b       	std	Y+22, r25	; 0x16
    16fe:	af 8b       	std	Y+23, r26	; 0x17
    1700:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1702:	6d 89       	ldd	r22, Y+21	; 0x15
    1704:	7e 89       	ldd	r23, Y+22	; 0x16
    1706:	8f 89       	ldd	r24, Y+23	; 0x17
    1708:	98 8d       	ldd	r25, Y+24	; 0x18
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <MAIN_option+0x25a>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c 8b       	std	Y+20, r25	; 0x14
    1720:	8b 8b       	std	Y+19, r24	; 0x13
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <MAIN_option+0x2d8>
	else if (__tmp > 65535)
    1724:	6d 89       	ldd	r22, Y+21	; 0x15
    1726:	7e 89       	ldd	r23, Y+22	; 0x16
    1728:	8f 89       	ldd	r24, Y+23	; 0x17
    172a:	98 8d       	ldd	r25, Y+24	; 0x18
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <MAIN_option+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	69 8d       	ldd	r22, Y+25	; 0x19
    173e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <MAIN_option+0x2ba>
    1766:	88 ec       	ldi	r24, 0xC8	; 200
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9a 8b       	std	Y+18, r25	; 0x12
    176c:	89 8b       	std	Y+17, r24	; 0x11
    176e:	89 89       	ldd	r24, Y+17	; 0x11
    1770:	9a 89       	ldd	r25, Y+18	; 0x12
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <MAIN_option+0x2a8>
    1776:	9a 8b       	std	Y+18, r25	; 0x12
    1778:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	8b 89       	ldd	r24, Y+19	; 0x13
    177c:	9c 89       	ldd	r25, Y+20	; 0x14
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9c 8b       	std	Y+20, r25	; 0x14
    1782:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	8b 89       	ldd	r24, Y+19	; 0x13
    1786:	9c 89       	ldd	r25, Y+20	; 0x14
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <MAIN_option+0x29c>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <MAIN_option+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	6d 89       	ldd	r22, Y+21	; 0x15
    1790:	7e 89       	ldd	r23, Y+22	; 0x16
    1792:	8f 89       	ldd	r24, Y+23	; 0x17
    1794:	98 8d       	ldd	r25, Y+24	; 0x18
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	98 8b       	std	Y+16, r25	; 0x10
    17a8:	8f 87       	std	Y+15, r24	; 0x0f
    17aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ac:	98 89       	ldd	r25, Y+16	; 0x10
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <MAIN_option+0x2e4>
    17b2:	98 8b       	std	Y+16, r25	; 0x10
    17b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_readByte(0x4040, &g_eeprom_pass[3]);
    17b6:	26 e8       	ldi	r18, 0x86	; 134
    17b8:	31 e0       	ldi	r19, 0x01	; 1
    17ba:	80 e4       	ldi	r24, 0x40	; 64
    17bc:	90 e4       	ldi	r25, 0x40	; 64
    17be:	b9 01       	movw	r22, r18
    17c0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <EEPROM_readByte>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e2       	ldi	r26, 0x20	; 32
    17ca:	b1 e4       	ldi	r27, 0x41	; 65
    17cc:	8b 87       	std	Y+11, r24	; 0x0b
    17ce:	9c 87       	std	Y+12, r25	; 0x0c
    17d0:	ad 87       	std	Y+13, r26	; 0x0d
    17d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17da:	9e 85       	ldd	r25, Y+14	; 0x0e
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a ef       	ldi	r20, 0xFA	; 250
    17e2:	54 e4       	ldi	r21, 0x44	; 68
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8f 83       	std	Y+7, r24	; 0x07
    17ee:	98 87       	std	Y+8, r25	; 0x08
    17f0:	a9 87       	std	Y+9, r26	; 0x09
    17f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f4:	6f 81       	ldd	r22, Y+7	; 0x07
    17f6:	78 85       	ldd	r23, Y+8	; 0x08
    17f8:	89 85       	ldd	r24, Y+9	; 0x09
    17fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <MAIN_option+0x34c>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <MAIN_option+0x3ca>
	else if (__tmp > 65535)
    1816:	6f 81       	ldd	r22, Y+7	; 0x07
    1818:	78 85       	ldd	r23, Y+8	; 0x08
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	9a 85       	ldd	r25, Y+10	; 0x0a
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <MAIN_option+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1830:	7c 85       	ldd	r23, Y+12	; 0x0c
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	9e 85       	ldd	r25, Y+14	; 0x0e
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <MAIN_option+0x3ac>
    1858:	88 ec       	ldi	r24, 0xC8	; 200
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <MAIN_option+0x39a>
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <MAIN_option+0x38e>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <MAIN_option+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <MAIN_option+0x3d6>
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	EEPROM_readByte(0x5050, &g_eeprom_pass[4]);
    18a8:	27 e8       	ldi	r18, 0x87	; 135
    18aa:	31 e0       	ldi	r19, 0x01	; 1
    18ac:	80 e5       	ldi	r24, 0x50	; 80
    18ae:	90 e5       	ldi	r25, 0x50	; 80
    18b0:	b9 01       	movw	r22, r18
    18b2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <EEPROM_readByte>



	/* Receive entered password */
	RECEIVE_pass(g_pass_entered);
    18b6:	88 e8       	ldi	r24, 0x88	; 136
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <RECEIVE_pass>

	/* If created password match with enterd password*/
	if(IS_passMatch(g_pass_entered,g_eeprom_pass))
    18be:	88 e8       	ldi	r24, 0x88	; 136
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	23 e8       	ldi	r18, 0x83	; 131
    18c4:	31 e0       	ldi	r19, 0x01	; 1
    18c6:	b9 01       	movw	r22, r18
    18c8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <IS_passMatch>
    18cc:	88 23       	and	r24, r24
    18ce:	d1 f0       	breq	.+52     	; 0x1904 <MAIN_option+0x43a>
	{
		/* Confirm to HMI_ECU that created password match with enterd password*/
		UART_sendByte(PASS_IS_MATCHED);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>

		/* Wait until interface HMI_ECU be ready */
		while(UART_recieveByte()!=HMI_ECU_READY);
    18d6:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	e1 f7       	brne	.-8      	; 0x18d6 <MAIN_option+0x40c>

		/* Receive users option if password is right*/
		option =UART_recieveByte();
    18de:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    18e2:	89 af       	std	Y+57, r24	; 0x39

		/*******************************************************************************
		 *                               STEP 3                                        *
		 *******************************************************************************/
		/*Open Door */
		if(option == OPEN_DOOR)
    18e4:	89 ad       	ldd	r24, Y+57	; 0x39
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <MAIN_option+0x42a>
		{
			OPEN_door();
    18ea:	0e 94 a4 0c 	call	0x1948	; 0x1948 <OPEN_door>
			MAIN_option();
    18ee:	0e 94 65 0a 	call	0x14ca	; 0x14ca <MAIN_option>
    18f2:	21 c0       	rjmp	.+66     	; 0x1936 <MAIN_option+0x46c>

		/*******************************************************************************
		 *                               STEP 4                                        *
		 *******************************************************************************/
		/* Change Password*/
		else if(option ==CHANGE_PASS)
    18f4:	89 ad       	ldd	r24, Y+57	; 0x39
    18f6:	82 30       	cpi	r24, 0x02	; 2
    18f8:	f1 f4       	brne	.+60     	; 0x1936 <MAIN_option+0x46c>
		{
			CREAT_pass();
    18fa:	0e 94 be 07 	call	0xf7c	; 0xf7c <CREAT_pass>
			MAIN_option();
    18fe:	0e 94 65 0a 	call	0x14ca	; 0x14ca <MAIN_option>
    1902:	19 c0       	rjmp	.+50     	; 0x1936 <MAIN_option+0x46c>
	/* If created password not match with enterd password*/
	else
	{

		/* Send to HMI_ECU that created password not match with enterd password*/
		UART_sendByte(PASS_NOT_MATCH);
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
		trail++;
    190a:	80 91 76 01 	lds	r24, 0x0176
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	80 93 76 01 	sts	0x0176, r24

		/* Two trail for entering wrong password*/
		if(trail<3)
    1914:	80 91 76 01 	lds	r24, 0x0176
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	18 f4       	brcc	.+6      	; 0x1922 <MAIN_option+0x458>
		{
			MAIN_option();
    191c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <MAIN_option>
    1920:	0a c0       	rjmp	.+20     	; 0x1936 <MAIN_option+0x46c>
		}

		/* If entering wrong password reach maximum turn on alarm and turn off HMI_ECU system inputs for 1 minute*/
		else if(trail==MAX_TRAIL)
    1922:	80 91 76 01 	lds	r24, 0x0176
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	31 f4       	brne	.+12     	; 0x1936 <MAIN_option+0x46c>
		{
			trail=0;
    192a:	10 92 76 01 	sts	0x0176, r1
			WRONG_PASS_ERROR();
    192e:	0e 94 ed 0c 	call	0x19da	; 0x19da <WRONG_PASS_ERROR>
			MAIN_option();
    1932:	0e 94 65 0a 	call	0x14ca	; 0x14ca <MAIN_option>
		}


	}

}
    1936:	e9 96       	adiw	r28, 0x39	; 57
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <OPEN_door>:
 * Function responsible for
 *  open door if user want and
 *  entered right password
 */
void OPEN_door(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	g_tick=0;
    1950:	10 92 75 01 	sts	0x0175, r1
    1954:	10 92 74 01 	sts	0x0174, r1
	/* Wait until interface HMI_ECU be ready */
	while(UART_recieveByte()!=HMI_ECU_READY);
    1958:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	e1 f7       	brne	.-8      	; 0x1958 <OPEN_door+0x10>
	UART_sendByte(OPEN_DOOR);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
	DcMotor_Rotate(DC_MOTOR_CW ,100);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	64 e6       	ldi	r22, 0x64	; 100
    196a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <DcMotor_Rotate>
	/* Unlock the door for 15 seconds and turn on the motor clock wise */
	while(g_tick <= 15);
    196e:	80 91 74 01 	lds	r24, 0x0174
    1972:	90 91 75 01 	lds	r25, 0x0175
    1976:	80 31       	cpi	r24, 0x10	; 16
    1978:	91 05       	cpc	r25, r1
    197a:	c8 f3       	brcs	.-14     	; 0x196e <OPEN_door+0x26>


	g_tick=0;
    197c:	10 92 75 01 	sts	0x0175, r1
    1980:	10 92 74 01 	sts	0x0174, r1
	DcMotor_Rotate(DC_MOTOR_STOP , 0);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <DcMotor_Rotate>
	/* Hold the motor  for 3 seconds */
	while(g_tick <= 3);
    198c:	80 91 74 01 	lds	r24, 0x0174
    1990:	90 91 75 01 	lds	r25, 0x0175
    1994:	84 30       	cpi	r24, 0x04	; 4
    1996:	91 05       	cpc	r25, r1
    1998:	c8 f3       	brcs	.-14     	; 0x198c <OPEN_door+0x44>



	g_tick=0;
    199a:	10 92 75 01 	sts	0x0175, r1
    199e:	10 92 74 01 	sts	0x0174, r1
	/* Wait until interface HMI_ECU be ready */
	while(UART_recieveByte()!=HMI_ECU_READY);
    19a2:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	e1 f7       	brne	.-8      	; 0x19a2 <OPEN_door+0x5a>
	UART_sendByte(LOCK_DOOR);
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
	DcMotor_Rotate(DC_MOTOR_ACW ,100);
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	64 e6       	ldi	r22, 0x64	; 100
    19b4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <DcMotor_Rotate>
	/* Lock the door for 15 seconds and turn on the motor anti clock wise */
	while(g_tick <= 15);
    19b8:	80 91 74 01 	lds	r24, 0x0174
    19bc:	90 91 75 01 	lds	r25, 0x0175
    19c0:	80 31       	cpi	r24, 0x10	; 16
    19c2:	91 05       	cpc	r25, r1
    19c4:	c8 f3       	brcs	.-14     	; 0x19b8 <OPEN_door+0x70>


	/* Return HMI_ECU  to main option*/
	UART_sendByte(RESTART);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>

	/* Turn off the motor  for 3 seconds */
	DcMotor_Rotate(DC_MOTOR_STOP , 0);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <DcMotor_Rotate>
}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <WRONG_PASS_ERROR>:
 * Function responsible for
 * turn on alarm and display EEPROM on screen
 * if user entered wrong password for three times
 */
void WRONG_PASS_ERROR(void)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	g_tick=0;
    19e2:	10 92 75 01 	sts	0x0175, r1
    19e6:	10 92 74 01 	sts	0x0174, r1
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <WRONG_PASS_ERROR+0x1c>

	while(g_tick<=60)
	{
		Buzzer_on();
    19ec:	0e 94 96 07 	call	0xf2c	; 0xf2c <Buzzer_on>

		UART_sendByte(ERROR_PASS);
    19f0:	8a e0       	ldi	r24, 0x0A	; 10
    19f2:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
 */
void WRONG_PASS_ERROR(void)
{
	g_tick=0;

	while(g_tick<=60)
    19f6:	80 91 74 01 	lds	r24, 0x0174
    19fa:	90 91 75 01 	lds	r25, 0x0175
    19fe:	8d 33       	cpi	r24, 0x3D	; 61
    1a00:	91 05       	cpc	r25, r1
    1a02:	a0 f3       	brcs	.-24     	; 0x19ec <WRONG_PASS_ERROR+0x12>
		Buzzer_on();

		UART_sendByte(ERROR_PASS);
	}

	Buzzer_off();
    1a04:	0e 94 a2 07 	call	0xf44	; 0xf44 <Buzzer_off>
	UART_sendByte(RESTART);
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <IS_passMatch>:
 * compare between two passwords
 * if not the same
 * return FALSE
 */
uint8 IS_passMatch(uint8 *str1 , uint8 *str2)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <IS_passMatch+0x6>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <IS_passMatch+0x8>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <IS_passMatch+0xa>
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	9b 83       	std	Y+3, r25	; 0x03
    1a24:	8a 83       	std	Y+2, r24	; 0x02
    1a26:	7d 83       	std	Y+5, r23	; 0x05
    1a28:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    1a2a:	19 82       	std	Y+1, r1	; 0x01

	for(i=0;i<5;i++)
    1a2c:	19 82       	std	Y+1, r1	; 0x01
    1a2e:	19 c0       	rjmp	.+50     	; 0x1a62 <IS_passMatch+0x4e>
	{
		if(str1[i]!=str2[i])
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	e2 0f       	add	r30, r18
    1a3e:	f3 1f       	adc	r31, r19
    1a40:	40 81       	ld	r20, Z
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e2 0f       	add	r30, r18
    1a50:	f3 1f       	adc	r31, r19
    1a52:	80 81       	ld	r24, Z
    1a54:	48 17       	cp	r20, r24
    1a56:	11 f0       	breq	.+4      	; 0x1a5c <IS_passMatch+0x48>
			return FALSE;
    1a58:	1e 82       	std	Y+6, r1	; 0x06
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <IS_passMatch+0x58>
 */
uint8 IS_passMatch(uint8 *str1 , uint8 *str2)
{
	uint8 i=0;

	for(i=0;i<5;i++)
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	85 30       	cpi	r24, 0x05	; 5
    1a66:	20 f3       	brcs	.-56     	; 0x1a30 <IS_passMatch+0x1c>
	{
		if(str1[i]!=str2[i])
			return FALSE;
	}
	return TRUE;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	8e 83       	std	Y+6, r24	; 0x06
    1a6c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1a6e:	26 96       	adiw	r28, 0x06	; 6
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <RECEIVE_pass>:
/*
 * Function responsible for
 * take user password
 */
void  RECEIVE_pass(uint8 *pass)
{
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <RECEIVE_pass+0xa>
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until interface HMI_ECU be ready communicate*/
	while(UART_recieveByte()!=HMI_ECU_READY);
    1a92:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	e1 f7       	brne	.-8      	; 0x1a92 <RECEIVE_pass+0x12>
	pass[0]=UART_recieveByte();
    1a9a:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa2:	80 83       	st	Z, r24

	/* Wait until interface HMI_ECU be ready communicate*/
	while(UART_recieveByte()!=HMI_ECU_READY);
    1aa4:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	e1 f7       	brne	.-8      	; 0x1aa4 <RECEIVE_pass+0x24>
	pass[1]=UART_recieveByte();
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab0:	8c 01       	movw	r16, r24
    1ab2:	0f 5f       	subi	r16, 0xFF	; 255
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1aba:	f8 01       	movw	r30, r16
    1abc:	80 83       	st	Z, r24

	/* Wait until interface HMI_ECU be ready communicate*/
	while(UART_recieveByte()!=HMI_ECU_READY);
    1abe:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <RECEIVE_pass+0x3e>
	pass[2]=UART_recieveByte();
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	8c 01       	movw	r16, r24
    1acc:	0e 5f       	subi	r16, 0xFE	; 254
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	80 83       	st	Z, r24

	/* Wait until interface HMI_ECU be ready communicate*/
	while(UART_recieveByte()!=HMI_ECU_READY);
    1ad8:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <RECEIVE_pass+0x58>
	pass[3]=UART_recieveByte();
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	8c 01       	movw	r16, r24
    1ae6:	0d 5f       	subi	r16, 0xFD	; 253
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1aee:	f8 01       	movw	r30, r16
    1af0:	80 83       	st	Z, r24

	/* Wait until interface HMI_ECU be ready communicate*/
	while(UART_recieveByte()!=HMI_ECU_READY);
    1af2:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <RECEIVE_pass+0x72>
	pass[4]=UART_recieveByte();
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	8c 01       	movw	r16, r24
    1b00:	0c 5f       	subi	r16, 0xFC	; 252
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    1b08:	f8 01       	movw	r30, r16
    1b0a:	80 83       	st	Z, r24
}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
}
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <DcMotor_Rotate+0x6>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	6a 83       	std	Y+2, r22	; 0x02
	if(state == DC_MOTOR_CW)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	71 f4       	brne	.+28     	; 0x1b80 <DcMotor_Rotate+0x30>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	0e 94 c5 11 	call	0x238a	; 0x238a <PWM_Timer0_Start>
    1b7e:	21 c0       	rjmp	.+66     	; 0x1bc2 <DcMotor_Rotate+0x72>
	}
	else if(state == DC_MOTOR_ACW)
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	71 f4       	brne	.+28     	; 0x1ba2 <DcMotor_Rotate+0x52>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	62 e0       	ldi	r22, 0x02	; 2
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	0e 94 c5 11 	call	0x238a	; 0x238a <PWM_Timer0_Start>
    1ba0:	10 c0       	rjmp	.+32     	; 0x1bc2 <DcMotor_Rotate+0x72>
	}
	else if(state == DC_MOTOR_STOP)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	88 23       	and	r24, r24
    1ba6:	69 f4       	brne	.+26     	; 0x1bc2 <DcMotor_Rotate+0x72>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	0e 94 c5 11 	call	0x238a	; 0x238a <PWM_Timer0_Start>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <EEPROM_writeByte>:
#include "external_eeprom.h"

#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16address , uint8 data)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <EEPROM_writeByte+0x6>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <EEPROM_writeByte+0x8>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1bde:	0e 94 39 13 	call	0x2672	; 0x2672 <TWI_start>
	if(TWI_getStatus()!= TWI_START)
    1be2:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1be6:	88 30       	cpi	r24, 0x08	; 8
    1be8:	11 f0       	breq	.+4      	; 0x1bee <EEPROM_writeByte+0x22>
		return ERROR;
    1bea:	1c 82       	std	Y+4, r1	; 0x04
    1bec:	28 c0       	rjmp	.+80     	; 0x1c3e <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8) ((u16address & 0x0700)>>7) | 0xA0);
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	80 70       	andi	r24, 0x00	; 0
    1bf4:	97 70       	andi	r25, 0x07	; 7
    1bf6:	88 0f       	add	r24, r24
    1bf8:	89 2f       	mov	r24, r25
    1bfa:	88 1f       	adc	r24, r24
    1bfc:	99 0b       	sbc	r25, r25
    1bfe:	91 95       	neg	r25
    1c00:	80 6a       	ori	r24, 0xA0	; 160
    1c02:	0e 94 54 13 	call	0x26a8	; 0x26a8 <TWI_writeByte>
	if(TWI_getStatus()!= TWI_MT_SLA_W_ACK)
    1c06:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1c0a:	88 31       	cpi	r24, 0x18	; 24
    1c0c:	11 f0       	breq	.+4      	; 0x1c12 <EEPROM_writeByte+0x46>
		return ERROR;
    1c0e:	1c 82       	std	Y+4, r1	; 0x04
    1c10:	16 c0       	rjmp	.+44     	; 0x1c3e <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)u16address);
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	0e 94 54 13 	call	0x26a8	; 0x26a8 <TWI_writeByte>
	if(TWI_getStatus()!= TWI_MT_DATA_ACK)
    1c18:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1c1c:	88 32       	cpi	r24, 0x28	; 40
    1c1e:	11 f0       	breq	.+4      	; 0x1c24 <EEPROM_writeByte+0x58>
		return ERROR;
    1c20:	1c 82       	std	Y+4, r1	; 0x04
    1c22:	0d c0       	rjmp	.+26     	; 0x1c3e <EEPROM_writeByte+0x72>

	   /* write byte to eeprom */
	TWI_writeByte(data);
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	0e 94 54 13 	call	0x26a8	; 0x26a8 <TWI_writeByte>
	if(TWI_getStatus()!= TWI_MT_DATA_ACK)
    1c2a:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1c2e:	88 32       	cpi	r24, 0x28	; 40
    1c30:	11 f0       	breq	.+4      	; 0x1c36 <EEPROM_writeByte+0x6a>
		return ERROR;
    1c32:	1c 82       	std	Y+4, r1	; 0x04
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <EEPROM_writeByte+0x72>

	  /* Send the Stop Bit */
	TWI_stop();
    1c36:	0e 94 49 13 	call	0x2692	; 0x2692 <TWI_stop>

	return SUCCESS;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	8c 83       	std	Y+4, r24	; 0x04
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <EEPROM_readByte>:




uint8 EEPROM_readByte(uint16 u16address , uint8 *data)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <EEPROM_readByte+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <EEPROM_readByte+0x8>
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	7c 83       	std	Y+4, r23	; 0x04
    1c62:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    1c64:	0e 94 39 13 	call	0x2672	; 0x2672 <TWI_start>
	if(TWI_getStatus()!= TWI_START)
    1c68:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1c6c:	88 30       	cpi	r24, 0x08	; 8
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <EEPROM_readByte+0x26>
		return ERROR;
    1c70:	1d 82       	std	Y+5, r1	; 0x05
    1c72:	44 c0       	rjmp	.+136    	; 0x1cfc <EEPROM_readByte+0xae>

	TWI_writeByte((uint8) ((u16address & 0x0700)>>7) | 0xA0);
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	80 70       	andi	r24, 0x00	; 0
    1c7a:	97 70       	andi	r25, 0x07	; 7
    1c7c:	88 0f       	add	r24, r24
    1c7e:	89 2f       	mov	r24, r25
    1c80:	88 1f       	adc	r24, r24
    1c82:	99 0b       	sbc	r25, r25
    1c84:	91 95       	neg	r25
    1c86:	80 6a       	ori	r24, 0xA0	; 160
    1c88:	0e 94 54 13 	call	0x26a8	; 0x26a8 <TWI_writeByte>
	if(TWI_getStatus()!= TWI_MT_SLA_W_ACK)
    1c8c:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1c90:	88 31       	cpi	r24, 0x18	; 24
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <EEPROM_readByte+0x4a>
		return ERROR;
    1c94:	1d 82       	std	Y+5, r1	; 0x05
    1c96:	32 c0       	rjmp	.+100    	; 0x1cfc <EEPROM_readByte+0xae>

	TWI_writeByte((uint8)u16address);
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <TWI_writeByte>
	if(TWI_getStatus()!= TWI_MT_DATA_ACK)
    1c9e:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1ca2:	88 32       	cpi	r24, 0x28	; 40
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <EEPROM_readByte+0x5c>
		return ERROR;
    1ca6:	1d 82       	std	Y+5, r1	; 0x05
    1ca8:	29 c0       	rjmp	.+82     	; 0x1cfc <EEPROM_readByte+0xae>

	  /* Send the Repeated Start Bit */
	TWI_start();
    1caa:	0e 94 39 13 	call	0x2672	; 0x2672 <TWI_start>
	if(TWI_getStatus()!= TWI_REP_START)
    1cae:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1cb2:	80 31       	cpi	r24, 0x10	; 16
    1cb4:	11 f0       	breq	.+4      	; 0x1cba <EEPROM_readByte+0x6c>
		return ERROR;
    1cb6:	1d 82       	std	Y+5, r1	; 0x05
    1cb8:	21 c0       	rjmp	.+66     	; 0x1cfc <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	     * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8) ((u16address & 0x0700)>>7) | 0xA0 | 1);
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	80 70       	andi	r24, 0x00	; 0
    1cc0:	97 70       	andi	r25, 0x07	; 7
    1cc2:	88 0f       	add	r24, r24
    1cc4:	89 2f       	mov	r24, r25
    1cc6:	88 1f       	adc	r24, r24
    1cc8:	99 0b       	sbc	r25, r25
    1cca:	91 95       	neg	r25
    1ccc:	81 6a       	ori	r24, 0xA1	; 161
    1cce:	0e 94 54 13 	call	0x26a8	; 0x26a8 <TWI_writeByte>
	if(TWI_getStatus()!= TWI_MT_SLA_R_ACK)
    1cd2:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1cd6:	80 34       	cpi	r24, 0x40	; 64
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <EEPROM_readByte+0x90>
		return ERROR;
    1cda:	1d 82       	std	Y+5, r1	; 0x05
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
	*data=TWI_readByteWithNACK();
    1cde:	0e 94 7e 13 	call	0x26fc	; 0x26fc <TWI_readByteWithNACK>
    1ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce6:	80 83       	st	Z, r24
	if(TWI_getStatus()!= TWI_MR_DATA_NACK)
    1ce8:	0e 94 91 13 	call	0x2722	; 0x2722 <TWI_getStatus>
    1cec:	88 35       	cpi	r24, 0x58	; 88
    1cee:	11 f0       	breq	.+4      	; 0x1cf4 <EEPROM_readByte+0xa6>
		return ERROR;
    1cf0:	1d 82       	std	Y+5, r1	; 0x05
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <EEPROM_readByte+0xae>

	TWI_stop();
    1cf4:	0e 94 49 13 	call	0x2692	; 0x2692 <TWI_stop>

	return SUCCESS;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <GPIO_setupPinDirection+0x6>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <GPIO_setupPinDirection+0x8>
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	6a 83       	std	Y+2, r22	; 0x02
    1d20:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	88 30       	cpi	r24, 0x08	; 8
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <GPIO_setupPinDirection+0x1c>
    1d28:	d5 c0       	rjmp	.+426    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	08 f0       	brcs	.+2      	; 0x1d32 <GPIO_setupPinDirection+0x24>
    1d30:	d1 c0       	rjmp	.+418    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3d 83       	std	Y+5, r19	; 0x05
    1d3a:	2c 83       	std	Y+4, r18	; 0x04
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	91 05       	cpc	r25, r1
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <GPIO_setupPinDirection+0x3a>
    1d46:	43 c0       	rjmp	.+134    	; 0x1dce <GPIO_setupPinDirection+0xc0>
    1d48:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <GPIO_setupPinDirection+0x4e>
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	71 f0       	breq	.+28     	; 0x1d76 <GPIO_setupPinDirection+0x68>
    1d5a:	bc c0       	rjmp	.+376    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <GPIO_setupPinDirection+0x5a>
    1d66:	5f c0       	rjmp	.+190    	; 0x1e26 <GPIO_setupPinDirection+0x118>
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	91 05       	cpc	r25, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <GPIO_setupPinDirection+0x66>
    1d72:	85 c0       	rjmp	.+266    	; 0x1e7e <GPIO_setupPinDirection+0x170>
    1d74:	af c0       	rjmp	.+350    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	a1 f4       	brne	.+40     	; 0x1da4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d7c:	aa e3       	ldi	r26, 0x3A	; 58
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ea e3       	ldi	r30, 0x3A	; 58
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <GPIO_setupPinDirection+0x8c>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <GPIO_setupPinDirection+0x88>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	98 c0       	rjmp	.+304    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1da4:	aa e3       	ldi	r26, 0x3A	; 58
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ea e3       	ldi	r30, 0x3A	; 58
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <GPIO_setupPinDirection+0xb4>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <GPIO_setupPinDirection+0xb0>
    1dc6:	80 95       	com	r24
    1dc8:	84 23       	and	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	83 c0       	rjmp	.+262    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	a1 f4       	brne	.+40     	; 0x1dfc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1dd4:	a7 e3       	ldi	r26, 0x37	; 55
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e7 e3       	ldi	r30, 0x37	; 55
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <GPIO_setupPinDirection+0xe4>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <GPIO_setupPinDirection+0xe0>
    1df6:	84 2b       	or	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	6c c0       	rjmp	.+216    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1dfc:	a7 e3       	ldi	r26, 0x37	; 55
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e7 e3       	ldi	r30, 0x37	; 55
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	48 2f       	mov	r20, r24
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 2e       	mov	r0, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <GPIO_setupPinDirection+0x10c>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <GPIO_setupPinDirection+0x108>
    1e1e:	80 95       	com	r24
    1e20:	84 23       	and	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	57 c0       	rjmp	.+174    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	a1 f4       	brne	.+40     	; 0x1e54 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e2c:	a4 e3       	ldi	r26, 0x34	; 52
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e4 e3       	ldi	r30, 0x34	; 52
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <GPIO_setupPinDirection+0x13c>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <GPIO_setupPinDirection+0x138>
    1e4e:	84 2b       	or	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	40 c0       	rjmp	.+128    	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e54:	a4 e3       	ldi	r26, 0x34	; 52
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e4 e3       	ldi	r30, 0x34	; 52
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <GPIO_setupPinDirection+0x164>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <GPIO_setupPinDirection+0x160>
    1e76:	80 95       	com	r24
    1e78:	84 23       	and	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	2b c0       	rjmp	.+86     	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	a1 f4       	brne	.+40     	; 0x1eac <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e84:	a1 e3       	ldi	r26, 0x31	; 49
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e1 e3       	ldi	r30, 0x31	; 49
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_setupPinDirection+0x194>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_setupPinDirection+0x190>
    1ea6:	84 2b       	or	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1eac:	a1 e3       	ldi	r26, 0x31	; 49
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e1 e3       	ldi	r30, 0x31	; 49
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <GPIO_setupPinDirection+0x1bc>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <GPIO_setupPinDirection+0x1b8>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <GPIO_writePin+0x6>
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <GPIO_writePin+0x8>
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	6a 83       	std	Y+2, r22	; 0x02
    1ef6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	88 30       	cpi	r24, 0x08	; 8
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <GPIO_writePin+0x1c>
    1efe:	d5 c0       	rjmp	.+426    	; 0x20aa <GPIO_writePin+0x1c6>
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	84 30       	cpi	r24, 0x04	; 4
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <GPIO_writePin+0x24>
    1f06:	d1 c0       	rjmp	.+418    	; 0x20aa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3d 83       	std	Y+5, r19	; 0x05
    1f10:	2c 83       	std	Y+4, r18	; 0x04
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <GPIO_writePin+0x3a>
    1f1c:	43 c0       	rjmp	.+134    	; 0x1fa4 <GPIO_writePin+0xc0>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <GPIO_writePin+0x4e>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	71 f0       	breq	.+28     	; 0x1f4c <GPIO_writePin+0x68>
    1f30:	bc c0       	rjmp	.+376    	; 0x20aa <GPIO_writePin+0x1c6>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <GPIO_writePin+0x5a>
    1f3c:	5f c0       	rjmp	.+190    	; 0x1ffc <GPIO_writePin+0x118>
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <GPIO_writePin+0x66>
    1f48:	85 c0       	rjmp	.+266    	; 0x2054 <GPIO_writePin+0x170>
    1f4a:	af c0       	rjmp	.+350    	; 0x20aa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	a1 f4       	brne	.+40     	; 0x1f7a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f52:	ab e3       	ldi	r26, 0x3B	; 59
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e3       	ldi	r30, 0x3B	; 59
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <GPIO_writePin+0x8c>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <GPIO_writePin+0x88>
    1f74:	84 2b       	or	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	98 c0       	rjmp	.+304    	; 0x20aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f7a:	ab e3       	ldi	r26, 0x3B	; 59
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	eb e3       	ldi	r30, 0x3B	; 59
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <GPIO_writePin+0xb4>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <GPIO_writePin+0xb0>
    1f9c:	80 95       	com	r24
    1f9e:	84 23       	and	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	83 c0       	rjmp	.+262    	; 0x20aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	a1 f4       	brne	.+40     	; 0x1fd2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1faa:	a8 e3       	ldi	r26, 0x38	; 56
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e8 e3       	ldi	r30, 0x38	; 56
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 2e       	mov	r0, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <GPIO_writePin+0xe4>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <GPIO_writePin+0xe0>
    1fcc:	84 2b       	or	r24, r20
    1fce:	8c 93       	st	X, r24
    1fd0:	6c c0       	rjmp	.+216    	; 0x20aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fd2:	a8 e3       	ldi	r26, 0x38	; 56
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e8 e3       	ldi	r30, 0x38	; 56
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <GPIO_writePin+0x10c>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <GPIO_writePin+0x108>
    1ff4:	80 95       	com	r24
    1ff6:	84 23       	and	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	57 c0       	rjmp	.+174    	; 0x20aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	a1 f4       	brne	.+40     	; 0x202a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2002:	a5 e3       	ldi	r26, 0x35	; 53
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e5 e3       	ldi	r30, 0x35	; 53
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <GPIO_writePin+0x13c>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <GPIO_writePin+0x138>
    2024:	84 2b       	or	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	40 c0       	rjmp	.+128    	; 0x20aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    202a:	a5 e3       	ldi	r26, 0x35	; 53
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e5 e3       	ldi	r30, 0x35	; 53
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	48 2f       	mov	r20, r24
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 2e       	mov	r0, r18
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <GPIO_writePin+0x164>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <GPIO_writePin+0x160>
    204c:	80 95       	com	r24
    204e:	84 23       	and	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	2b c0       	rjmp	.+86     	; 0x20aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	a1 f4       	brne	.+40     	; 0x2082 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    205a:	a2 e3       	ldi	r26, 0x32	; 50
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e2 e3       	ldi	r30, 0x32	; 50
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <GPIO_writePin+0x194>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <GPIO_writePin+0x190>
    207c:	84 2b       	or	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2082:	a2 e3       	ldi	r26, 0x32	; 50
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e2 e3       	ldi	r30, 0x32	; 50
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <GPIO_writePin+0x1bc>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <GPIO_writePin+0x1b8>
    20a4:	80 95       	com	r24
    20a6:	84 23       	and	r24, r20
    20a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <GPIO_readPin+0x6>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <GPIO_readPin+0x8>
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	8a 83       	std	Y+2, r24	; 0x02
    20ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20cc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	88 30       	cpi	r24, 0x08	; 8
    20d2:	08 f0       	brcs	.+2      	; 0x20d6 <GPIO_readPin+0x1c>
    20d4:	84 c0       	rjmp	.+264    	; 0x21de <GPIO_readPin+0x124>
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	84 30       	cpi	r24, 0x04	; 4
    20da:	08 f0       	brcs	.+2      	; 0x20de <GPIO_readPin+0x24>
    20dc:	80 c0       	rjmp	.+256    	; 0x21de <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	3d 83       	std	Y+5, r19	; 0x05
    20e6:	2c 83       	std	Y+4, r18	; 0x04
    20e8:	4c 81       	ldd	r20, Y+4	; 0x04
    20ea:	5d 81       	ldd	r21, Y+5	; 0x05
    20ec:	41 30       	cpi	r20, 0x01	; 1
    20ee:	51 05       	cpc	r21, r1
    20f0:	79 f1       	breq	.+94     	; 0x2150 <GPIO_readPin+0x96>
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	82 30       	cpi	r24, 0x02	; 2
    20f8:	91 05       	cpc	r25, r1
    20fa:	34 f4       	brge	.+12     	; 0x2108 <GPIO_readPin+0x4e>
    20fc:	2c 81       	ldd	r18, Y+4	; 0x04
    20fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2100:	21 15       	cp	r18, r1
    2102:	31 05       	cpc	r19, r1
    2104:	69 f0       	breq	.+26     	; 0x2120 <GPIO_readPin+0x66>
    2106:	6b c0       	rjmp	.+214    	; 0x21de <GPIO_readPin+0x124>
    2108:	4c 81       	ldd	r20, Y+4	; 0x04
    210a:	5d 81       	ldd	r21, Y+5	; 0x05
    210c:	42 30       	cpi	r20, 0x02	; 2
    210e:	51 05       	cpc	r21, r1
    2110:	b9 f1       	breq	.+110    	; 0x2180 <GPIO_readPin+0xc6>
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	83 30       	cpi	r24, 0x03	; 3
    2118:	91 05       	cpc	r25, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <GPIO_readPin+0x64>
    211c:	49 c0       	rjmp	.+146    	; 0x21b0 <GPIO_readPin+0xf6>
    211e:	5f c0       	rjmp	.+190    	; 0x21de <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2120:	e9 e3       	ldi	r30, 0x39	; 57
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	88 2f       	mov	r24, r24
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a9 01       	movw	r20, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <GPIO_readPin+0x7e>
    2134:	55 95       	asr	r21
    2136:	47 95       	ror	r20
    2138:	8a 95       	dec	r24
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <GPIO_readPin+0x7a>
    213c:	ca 01       	movw	r24, r20
    213e:	81 70       	andi	r24, 0x01	; 1
    2140:	90 70       	andi	r25, 0x00	; 0
    2142:	88 23       	and	r24, r24
    2144:	19 f0       	breq	.+6      	; 0x214c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	49 c0       	rjmp	.+146    	; 0x21de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	47 c0       	rjmp	.+142    	; 0x21de <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2150:	e6 e3       	ldi	r30, 0x36	; 54
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	88 2f       	mov	r24, r24
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a9 01       	movw	r20, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <GPIO_readPin+0xae>
    2164:	55 95       	asr	r21
    2166:	47 95       	ror	r20
    2168:	8a 95       	dec	r24
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <GPIO_readPin+0xaa>
    216c:	ca 01       	movw	r24, r20
    216e:	81 70       	andi	r24, 0x01	; 1
    2170:	90 70       	andi	r25, 0x00	; 0
    2172:	88 23       	and	r24, r24
    2174:	19 f0       	breq	.+6      	; 0x217c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	31 c0       	rjmp	.+98     	; 0x21de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    217c:	19 82       	std	Y+1, r1	; 0x01
    217e:	2f c0       	rjmp	.+94     	; 0x21de <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2180:	e3 e3       	ldi	r30, 0x33	; 51
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a9 01       	movw	r20, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <GPIO_readPin+0xde>
    2194:	55 95       	asr	r21
    2196:	47 95       	ror	r20
    2198:	8a 95       	dec	r24
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <GPIO_readPin+0xda>
    219c:	ca 01       	movw	r24, r20
    219e:	81 70       	andi	r24, 0x01	; 1
    21a0:	90 70       	andi	r25, 0x00	; 0
    21a2:	88 23       	and	r24, r24
    21a4:	19 f0       	breq	.+6      	; 0x21ac <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	19 c0       	rjmp	.+50     	; 0x21de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21ac:	19 82       	std	Y+1, r1	; 0x01
    21ae:	17 c0       	rjmp	.+46     	; 0x21de <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21b0:	e0 e3       	ldi	r30, 0x30	; 48
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a9 01       	movw	r20, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <GPIO_readPin+0x10e>
    21c4:	55 95       	asr	r21
    21c6:	47 95       	ror	r20
    21c8:	8a 95       	dec	r24
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <GPIO_readPin+0x10a>
    21cc:	ca 01       	movw	r24, r20
    21ce:	81 70       	andi	r24, 0x01	; 1
    21d0:	90 70       	andi	r25, 0x00	; 0
    21d2:	88 23       	and	r24, r24
    21d4:	19 f0       	breq	.+6      	; 0x21dc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	01 c0       	rjmp	.+2      	; 0x21de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21dc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <GPIO_setupPortDirection+0x6>
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <GPIO_setupPortDirection+0x8>
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	84 30       	cpi	r24, 0x04	; 4
    2204:	90 f5       	brcc	.+100    	; 0x226a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	3c 83       	std	Y+4, r19	; 0x04
    220e:	2b 83       	std	Y+3, r18	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	91 05       	cpc	r25, r1
    2218:	d1 f0       	breq	.+52     	; 0x224e <GPIO_setupPortDirection+0x5e>
    221a:	2b 81       	ldd	r18, Y+3	; 0x03
    221c:	3c 81       	ldd	r19, Y+4	; 0x04
    221e:	22 30       	cpi	r18, 0x02	; 2
    2220:	31 05       	cpc	r19, r1
    2222:	2c f4       	brge	.+10     	; 0x222e <GPIO_setupPortDirection+0x3e>
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	61 f0       	breq	.+24     	; 0x2244 <GPIO_setupPortDirection+0x54>
    222c:	1e c0       	rjmp	.+60     	; 0x226a <GPIO_setupPortDirection+0x7a>
    222e:	2b 81       	ldd	r18, Y+3	; 0x03
    2230:	3c 81       	ldd	r19, Y+4	; 0x04
    2232:	22 30       	cpi	r18, 0x02	; 2
    2234:	31 05       	cpc	r19, r1
    2236:	81 f0       	breq	.+32     	; 0x2258 <GPIO_setupPortDirection+0x68>
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	83 30       	cpi	r24, 0x03	; 3
    223e:	91 05       	cpc	r25, r1
    2240:	81 f0       	breq	.+32     	; 0x2262 <GPIO_setupPortDirection+0x72>
    2242:	13 c0       	rjmp	.+38     	; 0x226a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2244:	ea e3       	ldi	r30, 0x3A	; 58
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	80 83       	st	Z, r24
    224c:	0e c0       	rjmp	.+28     	; 0x226a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    224e:	e7 e3       	ldi	r30, 0x37	; 55
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	80 83       	st	Z, r24
    2256:	09 c0       	rjmp	.+18     	; 0x226a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2258:	e4 e3       	ldi	r30, 0x34	; 52
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	80 83       	st	Z, r24
    2260:	04 c0       	rjmp	.+8      	; 0x226a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2262:	e1 e3       	ldi	r30, 0x31	; 49
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	80 83       	st	Z, r24
			break;
		}
	}
}
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <GPIO_writePort+0x6>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <GPIO_writePort+0x8>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	84 30       	cpi	r24, 0x04	; 4
    228c:	90 f5       	brcc	.+100    	; 0x22f2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3c 83       	std	Y+4, r19	; 0x04
    2296:	2b 83       	std	Y+3, r18	; 0x03
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	91 05       	cpc	r25, r1
    22a0:	d1 f0       	breq	.+52     	; 0x22d6 <GPIO_writePort+0x5e>
    22a2:	2b 81       	ldd	r18, Y+3	; 0x03
    22a4:	3c 81       	ldd	r19, Y+4	; 0x04
    22a6:	22 30       	cpi	r18, 0x02	; 2
    22a8:	31 05       	cpc	r19, r1
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <GPIO_writePort+0x3e>
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	61 f0       	breq	.+24     	; 0x22cc <GPIO_writePort+0x54>
    22b4:	1e c0       	rjmp	.+60     	; 0x22f2 <GPIO_writePort+0x7a>
    22b6:	2b 81       	ldd	r18, Y+3	; 0x03
    22b8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ba:	22 30       	cpi	r18, 0x02	; 2
    22bc:	31 05       	cpc	r19, r1
    22be:	81 f0       	breq	.+32     	; 0x22e0 <GPIO_writePort+0x68>
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	83 30       	cpi	r24, 0x03	; 3
    22c6:	91 05       	cpc	r25, r1
    22c8:	81 f0       	breq	.+32     	; 0x22ea <GPIO_writePort+0x72>
    22ca:	13 c0       	rjmp	.+38     	; 0x22f2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22cc:	eb e3       	ldi	r30, 0x3B	; 59
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	80 83       	st	Z, r24
    22d4:	0e c0       	rjmp	.+28     	; 0x22f2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22d6:	e8 e3       	ldi	r30, 0x38	; 56
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	80 83       	st	Z, r24
    22de:	09 c0       	rjmp	.+18     	; 0x22f2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22e0:	e5 e3       	ldi	r30, 0x35	; 53
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	80 83       	st	Z, r24
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    22ea:	e2 e3       	ldi	r30, 0x32	; 50
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <GPIO_readPort+0x6>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <GPIO_readPort+0x8>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    230e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	84 30       	cpi	r24, 0x04	; 4
    2314:	90 f5       	brcc	.+100    	; 0x237a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	3c 83       	std	Y+4, r19	; 0x04
    231e:	2b 83       	std	Y+3, r18	; 0x03
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	91 05       	cpc	r25, r1
    2328:	d1 f0       	breq	.+52     	; 0x235e <GPIO_readPort+0x5e>
    232a:	2b 81       	ldd	r18, Y+3	; 0x03
    232c:	3c 81       	ldd	r19, Y+4	; 0x04
    232e:	22 30       	cpi	r18, 0x02	; 2
    2330:	31 05       	cpc	r19, r1
    2332:	2c f4       	brge	.+10     	; 0x233e <GPIO_readPort+0x3e>
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	61 f0       	breq	.+24     	; 0x2354 <GPIO_readPort+0x54>
    233c:	1e c0       	rjmp	.+60     	; 0x237a <GPIO_readPort+0x7a>
    233e:	2b 81       	ldd	r18, Y+3	; 0x03
    2340:	3c 81       	ldd	r19, Y+4	; 0x04
    2342:	22 30       	cpi	r18, 0x02	; 2
    2344:	31 05       	cpc	r19, r1
    2346:	81 f0       	breq	.+32     	; 0x2368 <GPIO_readPort+0x68>
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	91 05       	cpc	r25, r1
    2350:	81 f0       	breq	.+32     	; 0x2372 <GPIO_readPort+0x72>
    2352:	13 c0       	rjmp	.+38     	; 0x237a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2354:	e9 e3       	ldi	r30, 0x39	; 57
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	0e c0       	rjmp	.+28     	; 0x237a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    235e:	e6 e3       	ldi	r30, 0x36	; 54
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	09 c0       	rjmp	.+18     	; 0x237a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2368:	e3 e3       	ldi	r30, 0x33	; 51
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	04 c0       	rjmp	.+8      	; 0x237a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2372:	e0 e3       	ldi	r30, 0x30	; 48
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    237a:	89 81       	ldd	r24, Y+1	; 0x01
}
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <PWM_Timer0_Start>:
 * 3. Setup the prescaler with F_CPU/8
 * 4. Setup the compare value based on the required input duty cycle
 * 5. Setup the direction for OC0 as output pin
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Timer0 initial value */
    239a:	e2 e5       	ldi	r30, 0x52	; 82
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	10 82       	st	Z, r1

	OCR0  = ((float)duty_cycle / 100) * 255; /* Set Compare value */
    23a0:	0c e5       	ldi	r16, 0x5C	; 92
    23a2:	10 e0       	ldi	r17, 0x00	; 0
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	48 ec       	ldi	r20, 0xC8	; 200
    23c4:	52 e4       	ldi	r21, 0x42	; 66
    23c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4f e7       	ldi	r20, 0x7F	; 127
    23d8:	53 e4       	ldi	r21, 0x43	; 67
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	f8 01       	movw	r30, r16
    23f0:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    23f2:	e3 e5       	ldi	r30, 0x53	; 83
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	8a e6       	ldi	r24, 0x6A	; 106
    23f8:	80 83       	st	Z, r24

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	63 e0       	ldi	r22, 0x03	; 3
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <GPIO_setupPinDirection>
}
    2404:	0f 90       	pop	r0
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	08 95       	ret

00002410 <__vector_7>:

/* Timer1 call back pointer */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	ef 93       	push	r30
    2430:	ff 93       	push	r31
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    243a:	80 91 77 01 	lds	r24, 0x0177
    243e:	90 91 78 01 	lds	r25, 0x0178
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	29 f0       	breq	.+10     	; 0x2450 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    2446:	e0 91 77 01 	lds	r30, 0x0177
    244a:	f0 91 78 01 	lds	r31, 0x0178
    244e:	09 95       	icall
	}

}
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	ff 91       	pop	r31
    2456:	ef 91       	pop	r30
    2458:	bf 91       	pop	r27
    245a:	af 91       	pop	r26
    245c:	9f 91       	pop	r25
    245e:	8f 91       	pop	r24
    2460:	7f 91       	pop	r23
    2462:	6f 91       	pop	r22
    2464:	5f 91       	pop	r21
    2466:	4f 91       	pop	r20
    2468:	3f 91       	pop	r19
    246a:	2f 91       	pop	r18
    246c:	0f 90       	pop	r0
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	0f 90       	pop	r0
    2472:	1f 90       	pop	r1
    2474:	18 95       	reti

00002476 <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    2476:	1f 92       	push	r1
    2478:	0f 92       	push	r0
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	0f 92       	push	r0
    247e:	11 24       	eor	r1, r1
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    24a0:	80 91 77 01 	lds	r24, 0x0177
    24a4:	90 91 78 01 	lds	r25, 0x0178
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	29 f0       	breq	.+10     	; 0x24b6 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    24ac:	e0 91 77 01 	lds	r30, 0x0177
    24b0:	f0 91 78 01 	lds	r31, 0x0178
    24b4:	09 95       	icall
	}
}
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	ff 91       	pop	r31
    24bc:	ef 91       	pop	r30
    24be:	bf 91       	pop	r27
    24c0:	af 91       	pop	r26
    24c2:	9f 91       	pop	r25
    24c4:	8f 91       	pop	r24
    24c6:	7f 91       	pop	r23
    24c8:	6f 91       	pop	r22
    24ca:	5f 91       	pop	r21
    24cc:	4f 91       	pop	r20
    24ce:	3f 91       	pop	r19
    24d0:	2f 91       	pop	r18
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	0f 90       	pop	r0
    24d8:	1f 90       	pop	r1
    24da:	18 95       	reti

000024dc <Timer1_init>:

/*  Function responsible for
 *  Setup Timer1 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <Timer1_init+0x6>
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;
    24ea:	ac e4       	ldi	r26, 0x4C	; 76
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	11 96       	adiw	r26, 0x01	; 1
    24f8:	9c 93       	st	X, r25
    24fa:	8e 93       	st	-X, r24

	OCR1A=Config_Ptr->compare_value;
    24fc:	aa e4       	ldi	r26, 0x4A	; 74
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e9 81       	ldd	r30, Y+1	; 0x01
    2502:	fa 81       	ldd	r31, Y+2	; 0x02
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	11 96       	adiw	r26, 0x01	; 1
    250a:	9c 93       	st	X, r25
    250c:	8e 93       	st	-X, r24

	if((Config_Ptr->mode)==NORMAL)
    250e:	e9 81       	ldd	r30, Y+1	; 0x01
    2510:	fa 81       	ldd	r31, Y+2	; 0x02
    2512:	85 81       	ldd	r24, Z+5	; 0x05
    2514:	88 23       	and	r24, r24
    2516:	41 f4       	brne	.+16     	; 0x2528 <Timer1_init+0x4c>
	{
		TIMSK |= (1<<TOIE1);
    2518:	a9 e5       	ldi	r26, 0x59	; 89
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e9 e5       	ldi	r30, 0x59	; 89
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	84 60       	ori	r24, 0x04	; 4
    2524:	8c 93       	st	X, r24
    2526:	0c c0       	rjmp	.+24     	; 0x2540 <Timer1_init+0x64>

	}
	else if((Config_Ptr->mode)==CTC)
    2528:	e9 81       	ldd	r30, Y+1	; 0x01
    252a:	fa 81       	ldd	r31, Y+2	; 0x02
    252c:	85 81       	ldd	r24, Z+5	; 0x05
    252e:	84 30       	cpi	r24, 0x04	; 4
    2530:	39 f4       	brne	.+14     	; 0x2540 <Timer1_init+0x64>
	{
		TIMSK |= (1<<OCIE1A);
    2532:	a9 e5       	ldi	r26, 0x59	; 89
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e9 e5       	ldi	r30, 0x59	; 89
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	80 61       	ori	r24, 0x10	; 16
    253e:	8c 93       	st	X, r24
	}


	TCCR1A |= (1<<FOC1A)
    2540:	af e4       	ldi	r26, 0x4F	; 79
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	ef e4       	ldi	r30, 0x4F	; 79
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	28 2f       	mov	r18, r24
    254c:	e9 81       	ldd	r30, Y+1	; 0x01
    254e:	fa 81       	ldd	r31, Y+2	; 0x02
    2550:	85 81       	ldd	r24, Z+5	; 0x05
    2552:	81 70       	andi	r24, 0x01	; 1
    2554:	98 2f       	mov	r25, r24
    2556:	98 60       	ori	r25, 0x08	; 8
    2558:	e9 81       	ldd	r30, Y+1	; 0x01
    255a:	fa 81       	ldd	r31, Y+2	; 0x02
    255c:	85 81       	ldd	r24, Z+5	; 0x05
    255e:	82 70       	andi	r24, 0x02	; 2
    2560:	89 2b       	or	r24, r25
    2562:	82 2b       	or	r24, r18
    2564:	8c 93       	st	X, r24

		     |(GET_BIT((Config_Ptr->mode),0 ) << WGM10)
			 |(GET_BIT((Config_Ptr->mode),1 ) << WGM11);


	TCCR1B |=  ((Config_Ptr->prescaler & 0x07)<< CS10)
    2566:	ae e4       	ldi	r26, 0x4E	; 78
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ee e4       	ldi	r30, 0x4E	; 78
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	38 2f       	mov	r19, r24
    2572:	e9 81       	ldd	r30, Y+1	; 0x01
    2574:	fa 81       	ldd	r31, Y+2	; 0x02
    2576:	84 81       	ldd	r24, Z+4	; 0x04
    2578:	28 2f       	mov	r18, r24
    257a:	27 70       	andi	r18, 0x07	; 7
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	85 81       	ldd	r24, Z+5	; 0x05
    2582:	88 2f       	mov	r24, r24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	84 70       	andi	r24, 0x04	; 4
    2588:	90 70       	andi	r25, 0x00	; 0
    258a:	95 95       	asr	r25
    258c:	87 95       	ror	r24
    258e:	95 95       	asr	r25
    2590:	87 95       	ror	r24
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	28 2b       	or	r18, r24
    25a0:	e9 81       	ldd	r30, Y+1	; 0x01
    25a2:	fa 81       	ldd	r31, Y+2	; 0x02
    25a4:	85 81       	ldd	r24, Z+5	; 0x05
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	88 70       	andi	r24, 0x08	; 8
    25ac:	90 70       	andi	r25, 0x00	; 0
    25ae:	95 95       	asr	r25
    25b0:	87 95       	ror	r24
    25b2:	95 95       	asr	r25
    25b4:	87 95       	ror	r24
    25b6:	95 95       	asr	r25
    25b8:	87 95       	ror	r24
    25ba:	82 95       	swap	r24
    25bc:	92 95       	swap	r25
    25be:	90 7f       	andi	r25, 0xF0	; 240
    25c0:	98 27       	eor	r25, r24
    25c2:	80 7f       	andi	r24, 0xF0	; 240
    25c4:	98 27       	eor	r25, r24
    25c6:	82 2b       	or	r24, r18
    25c8:	83 2b       	or	r24, r19
    25ca:	8c 93       	st	X, r24

    	      |(GET_BIT((Config_Ptr->mode),2 ) << WGM12)
		      |(GET_BIT((Config_Ptr->mode),3 ) << WGM13);
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <Timer1_deInit>:

/*  Function responsible for
 *  Turn off Timer1 */
void Timer1_deInit(void)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    25de:	ef e4       	ldi	r30, 0x4F	; 79
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	10 82       	st	Z, r1
	TCCR1B = 0;
    25e4:	ee e4       	ldi	r30, 0x4E	; 78
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	10 82       	st	Z, r1
	TCNT1 = 0;
    25ea:	ec e4       	ldi	r30, 0x4C	; 76
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	11 82       	std	Z+1, r1	; 0x01
    25f0:	10 82       	st	Z, r1
	ICR1 = 0;
    25f2:	e6 e4       	ldi	r30, 0x46	; 70
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	11 82       	std	Z+1, r1	; 0x01
    25f8:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE1) &~(1<<OCIE1A) ;
    25fa:	a9 e5       	ldi	r26, 0x59	; 89
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e9 e5       	ldi	r30, 0x59	; 89
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8b 7e       	andi	r24, 0xEB	; 235
    2606:	8c 93       	st	X, r24
}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <Timer1_setCallBack>:


/*  Function responsible for
 *  call back Timer1 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <Timer1_setCallBack+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr=a_ptr;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	90 93 78 01 	sts	0x0178, r25
    2624:	80 93 77 01 	sts	0x0177, r24
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <TWI_init+0x6>
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: depend on user input using zero pre-scaler TWPS=00  F_CPU=8MHZ*/
	TWBR = Config_Ptr->bit_rate;
    2640:	a0 e2       	ldi	r26, 0x20	; 32
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e9 81       	ldd	r30, Y+1	; 0x01
    2646:	fa 81       	ldd	r31, Y+2	; 0x02
    2648:	81 81       	ldd	r24, Z+1	; 0x01
    264a:	8c 93       	st	X, r24
	TWSR = 0x00;
    264c:	e1 e2       	ldi	r30, 0x21	; 33
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = ((Config_Ptr->address)<<1); /* my address  + 0 (Call Recognition: Off)*/
    2652:	a2 e2       	ldi	r26, 0x22	; 34
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	fa 81       	ldd	r31, Y+2	; 0x02
    265a:	80 81       	ld	r24, Z
    265c:	88 0f       	add	r24, r24
    265e:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    2660:	e6 e5       	ldi	r30, 0x56	; 86
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	84 e0       	ldi	r24, 0x04	; 4
    2666:	80 83       	st	Z, r24
}
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <TWI_start>:



void TWI_start(void)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR =(1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    267a:	e6 e5       	ldi	r30, 0x56	; 86
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	84 ea       	ldi	r24, 0xA4	; 164
    2680:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2682:	e6 e5       	ldi	r30, 0x56	; 86
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	88 23       	and	r24, r24
    268a:	dc f7       	brge	.-10     	; 0x2682 <TWI_start+0x10>
}
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <TWI_stop>:



void TWI_stop(void)
{
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR =(1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    269a:	e6 e5       	ldi	r30, 0x56	; 86
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	84 e9       	ldi	r24, 0x94	; 148
    26a0:	80 83       	st	Z, r24

}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <TWI_writeByte>:




void TWI_writeByte(uint8 data)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR=data;
    26b4:	e3 e2       	ldi	r30, 0x23	; 35
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	80 83       	st	Z, r24
	/* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR =(1<<TWINT) | (1<<TWEN);
    26bc:	e6 e5       	ldi	r30, 0x56	; 86
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	84 e8       	ldi	r24, 0x84	; 132
    26c2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    26c4:	e6 e5       	ldi	r30, 0x56	; 86
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	88 23       	and	r24, r24
    26cc:	dc f7       	brge	.-10     	; 0x26c4 <TWI_writeByte+0x1c>

}
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <TWI_readBiteWithACK>:



uint8 TWI_readBiteWithACK(void)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR =(1<<TWINT) |(1<<TWEN) |(1<<TWEA);
    26de:	e6 e5       	ldi	r30, 0x56	; 86
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	84 ec       	ldi	r24, 0xC4	; 196
    26e4:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    26e6:	e6 e5       	ldi	r30, 0x56	; 86
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	88 23       	and	r24, r24
    26ee:	dc f7       	brge	.-10     	; 0x26e6 <TWI_readBiteWithACK+0x10>

	return TWDR;
    26f0:	e3 e2       	ldi	r30, 0x23	; 35
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <TWI_readByteWithNACK>:



uint8 TWI_readByteWithNACK(void)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
	TWCR =(1<<TWINT) |(1<<TWEN) ;
    2704:	e6 e5       	ldi	r30, 0x56	; 86
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	84 e8       	ldi	r24, 0x84	; 132
    270a:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    270c:	e6 e5       	ldi	r30, 0x56	; 86
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 23       	and	r24, r24
    2714:	dc f7       	brge	.-10     	; 0x270c <TWI_readByteWithNACK+0x10>

	return TWDR;
    2716:	e3 e2       	ldi	r30, 0x23	; 35
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
}
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <TWI_getStatus>:




uint8 TWI_getStatus(void)
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	0f 92       	push	r0
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	uint8 status=0;
    272c:	19 82       	std	Y+1, r1	; 0x01

	status = TWSR & 0xF8;
    272e:	e1 e2       	ldi	r30, 0x21	; 33
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	88 7f       	andi	r24, 0xF8	; 248
    2736:	89 83       	std	Y+1, r24	; 0x01

	return status;
    2738:	89 81       	ldd	r24, Y+1	; 0x01
}
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <UART_init>:
#include <avr/io.h>
#include "uart.h"
#include "common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	00 d0       	rcall	.+0      	; 0x2748 <UART_init+0x6>
    2748:	00 d0       	rcall	.+0      	; 0x274a <UART_init+0x8>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	9c 83       	std	Y+4, r25	; 0x04
    2750:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value;

	UCSRA = (1<<U2X);
    2752:	eb e2       	ldi	r30, 0x2B	; 43
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	80 83       	st	Z, r24

	UCSRB= (1<<TXEN) | (1<<RXEN)
    275a:	aa e2       	ldi	r26, 0x2A	; 42
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	eb 81       	ldd	r30, Y+3	; 0x03
    2760:	fc 81       	ldd	r31, Y+4	; 0x04
    2762:	80 81       	ld	r24, Z
    2764:	84 70       	andi	r24, 0x04	; 4
    2766:	88 61       	ori	r24, 0x18	; 24
    2768:	8c 93       	st	X, r24

		 | ( GET_BIT((Config_Ptr->bit_data) ,2 ) <<UCSZ2);

	UCSRC= (1<<URSEL)
    276a:	a0 e4       	ldi	r26, 0x40	; 64
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	eb 81       	ldd	r30, Y+3	; 0x03
    2770:	fc 81       	ldd	r31, Y+4	; 0x04
    2772:	80 81       	ld	r24, Z
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	81 70       	andi	r24, 0x01	; 1
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	28 2f       	mov	r18, r24
    2782:	20 68       	ori	r18, 0x80	; 128
    2784:	eb 81       	ldd	r30, Y+3	; 0x03
    2786:	fc 81       	ldd	r31, Y+4	; 0x04
    2788:	80 81       	ld	r24, Z
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	82 70       	andi	r24, 0x02	; 2
    2790:	90 70       	andi	r25, 0x00	; 0
    2792:	95 95       	asr	r25
    2794:	87 95       	ror	r24
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	28 2b       	or	r18, r24
    27a0:	eb 81       	ldd	r30, Y+3	; 0x03
    27a2:	fc 81       	ldd	r31, Y+4	; 0x04
    27a4:	81 81       	ldd	r24, Z+1	; 0x01
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	81 70       	andi	r24, 0x01	; 1
    27ac:	90 70       	andi	r25, 0x00	; 0
    27ae:	82 95       	swap	r24
    27b0:	92 95       	swap	r25
    27b2:	90 7f       	andi	r25, 0xF0	; 240
    27b4:	98 27       	eor	r25, r24
    27b6:	80 7f       	andi	r24, 0xF0	; 240
    27b8:	98 27       	eor	r25, r24
    27ba:	28 2b       	or	r18, r24
    27bc:	eb 81       	ldd	r30, Y+3	; 0x03
    27be:	fc 81       	ldd	r31, Y+4	; 0x04
    27c0:	81 81       	ldd	r24, Z+1	; 0x01
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	82 70       	andi	r24, 0x02	; 2
    27c8:	90 70       	andi	r25, 0x00	; 0
    27ca:	95 95       	asr	r25
    27cc:	87 95       	ror	r24
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	82 95       	swap	r24
    27d4:	92 95       	swap	r25
    27d6:	90 7f       	andi	r25, 0xF0	; 240
    27d8:	98 27       	eor	r25, r24
    27da:	80 7f       	andi	r24, 0xF0	; 240
    27dc:	98 27       	eor	r25, r24
    27de:	28 2b       	or	r18, r24
    27e0:	eb 81       	ldd	r30, Y+3	; 0x03
    27e2:	fc 81       	ldd	r31, Y+4	; 0x04
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	82 2b       	or	r24, r18
    27f8:	8c 93       	st	X, r24
		   | (GET_BIT((Config_Ptr->parity) , 1)<< UPM1)

	       | ((Config_Ptr->stop_bit) << USBS);


	ubrr_value=(uint16) ((F_CPU / ((Config_Ptr->baud_rate)* 8UL)) -1);
    27fa:	eb 81       	ldd	r30, Y+3	; 0x03
    27fc:	fc 81       	ldd	r31, Y+4	; 0x04
    27fe:	83 81       	ldd	r24, Z+3	; 0x03
    2800:	94 81       	ldd	r25, Z+4	; 0x04
    2802:	cc 01       	movw	r24, r24
    2804:	a0 e0       	ldi	r26, 0x00	; 0
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	aa 1f       	adc	r26, r26
    280e:	bb 1f       	adc	r27, r27
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	aa 1f       	adc	r26, r26
    2816:	bb 1f       	adc	r27, r27
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	aa 1f       	adc	r26, r26
    281e:	bb 1f       	adc	r27, r27
    2820:	9c 01       	movw	r18, r24
    2822:	ad 01       	movw	r20, r26
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	92 e1       	ldi	r25, 0x12	; 18
    2828:	aa e7       	ldi	r26, 0x7A	; 122
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 b6 14 	call	0x296c	; 0x296c <__udivmodsi4>
    2834:	da 01       	movw	r26, r20
    2836:	c9 01       	movw	r24, r18
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9a 83       	std	Y+2, r25	; 0x02
    283c:	89 83       	std	Y+1, r24	; 0x01

	UBRRH =ubrr_value>>8;
    283e:	e0 e4       	ldi	r30, 0x40	; 64
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	89 2f       	mov	r24, r25
    2848:	99 27       	eor	r25, r25
    284a:	80 83       	st	Z, r24
	UBRRL =ubrr_value;
    284c:	e9 e2       	ldi	r30, 0x29	; 41
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	80 83       	st	Z, r24
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    286e:	eb e2       	ldi	r30, 0x2B	; 43
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	80 72       	andi	r24, 0x20	; 32
    287a:	90 70       	andi	r25, 0x00	; 0
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	b9 f3       	breq	.-18     	; 0x286e <UART_sendByte+0xc>

	UDR=data;
    2880:	ec e2       	ldi	r30, 0x2C	; 44
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	80 83       	st	Z, r24
}
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2898:	eb e2       	ldi	r30, 0x2B	; 43
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 23       	and	r24, r24
    28a0:	dc f7       	brge	.-10     	; 0x2898 <UART_recieveByte+0x8>

	return UDR;
    28a2:	ec e2       	ldi	r30, 0x2C	; 44
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
}
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <UART_sendString>:


void UART_sendString(const uint8 *str)
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <UART_sendString+0x6>
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	0a c0       	rjmp	.+20     	; 0x28d2 <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
    28be:	e9 81       	ldd	r30, Y+1	; 0x01
    28c0:	fa 81       	ldd	r31, Y+2	; 0x02
    28c2:	80 81       	ld	r24, Z
    28c4:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
		str++;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	9a 83       	std	Y+2, r25	; 0x02
    28d0:	89 83       	std	Y+1, r24	; 0x01
}


void UART_sendString(const uint8 *str)
{
	while(*str != '\0')
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	80 81       	ld	r24, Z
    28d8:	88 23       	and	r24, r24
    28da:	89 f7       	brne	.-30     	; 0x28be <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <UART_receiveString>:


void UART_receiveString(uint8 *str)
{
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <UART_receiveString+0xa>
    28f0:	0f 92       	push	r0
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	9b 83       	std	Y+3, r25	; 0x03
    28f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    28fa:	19 82       	std	Y+1, r1	; 0x01

	str[i]=UART_recieveByte();
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	9b 81       	ldd	r25, Y+3	; 0x03
    2906:	8c 01       	movw	r16, r24
    2908:	02 0f       	add	r16, r18
    290a:	13 1f       	adc	r17, r19
    290c:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    2910:	f8 01       	movw	r30, r16
    2912:	80 83       	st	Z, r24
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <UART_receiveString+0x4e>

	while(str[i] != '#')
	{
		i++;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_recieveByte();
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	9b 81       	ldd	r25, Y+3	; 0x03
    2926:	8c 01       	movw	r16, r24
    2928:	02 0f       	add	r16, r18
    292a:	13 1f       	adc	r17, r19
    292c:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    2930:	f8 01       	movw	r30, r16
    2932:	80 83       	st	Z, r24
{
	uint8 i=0;

	str[i]=UART_recieveByte();

	while(str[i] != '#')
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	80 81       	ld	r24, Z
    2946:	83 32       	cpi	r24, 0x23	; 35
    2948:	31 f7       	brne	.-52     	; 0x2916 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_recieveByte();
	}
	str[i]='\0';
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	9b 81       	ldd	r25, Y+3	; 0x03
    2954:	fc 01       	movw	r30, r24
    2956:	e2 0f       	add	r30, r18
    2958:	f3 1f       	adc	r31, r19
    295a:	10 82       	st	Z, r1
}
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	08 95       	ret

0000296c <__udivmodsi4>:
    296c:	a1 e2       	ldi	r26, 0x21	; 33
    296e:	1a 2e       	mov	r1, r26
    2970:	aa 1b       	sub	r26, r26
    2972:	bb 1b       	sub	r27, r27
    2974:	fd 01       	movw	r30, r26
    2976:	0d c0       	rjmp	.+26     	; 0x2992 <__udivmodsi4_ep>

00002978 <__udivmodsi4_loop>:
    2978:	aa 1f       	adc	r26, r26
    297a:	bb 1f       	adc	r27, r27
    297c:	ee 1f       	adc	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	a2 17       	cp	r26, r18
    2982:	b3 07       	cpc	r27, r19
    2984:	e4 07       	cpc	r30, r20
    2986:	f5 07       	cpc	r31, r21
    2988:	20 f0       	brcs	.+8      	; 0x2992 <__udivmodsi4_ep>
    298a:	a2 1b       	sub	r26, r18
    298c:	b3 0b       	sbc	r27, r19
    298e:	e4 0b       	sbc	r30, r20
    2990:	f5 0b       	sbc	r31, r21

00002992 <__udivmodsi4_ep>:
    2992:	66 1f       	adc	r22, r22
    2994:	77 1f       	adc	r23, r23
    2996:	88 1f       	adc	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	1a 94       	dec	r1
    299c:	69 f7       	brne	.-38     	; 0x2978 <__udivmodsi4_loop>
    299e:	60 95       	com	r22
    29a0:	70 95       	com	r23
    29a2:	80 95       	com	r24
    29a4:	90 95       	com	r25
    29a6:	9b 01       	movw	r18, r22
    29a8:	ac 01       	movw	r20, r24
    29aa:	bd 01       	movw	r22, r26
    29ac:	cf 01       	movw	r24, r30
    29ae:	08 95       	ret

000029b0 <__prologue_saves__>:
    29b0:	2f 92       	push	r2
    29b2:	3f 92       	push	r3
    29b4:	4f 92       	push	r4
    29b6:	5f 92       	push	r5
    29b8:	6f 92       	push	r6
    29ba:	7f 92       	push	r7
    29bc:	8f 92       	push	r8
    29be:	9f 92       	push	r9
    29c0:	af 92       	push	r10
    29c2:	bf 92       	push	r11
    29c4:	cf 92       	push	r12
    29c6:	df 92       	push	r13
    29c8:	ef 92       	push	r14
    29ca:	ff 92       	push	r15
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	ca 1b       	sub	r28, r26
    29da:	db 0b       	sbc	r29, r27
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	09 94       	ijmp

000029e8 <__epilogue_restores__>:
    29e8:	2a 88       	ldd	r2, Y+18	; 0x12
    29ea:	39 88       	ldd	r3, Y+17	; 0x11
    29ec:	48 88       	ldd	r4, Y+16	; 0x10
    29ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    29f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29fa:	b9 84       	ldd	r11, Y+9	; 0x09
    29fc:	c8 84       	ldd	r12, Y+8	; 0x08
    29fe:	df 80       	ldd	r13, Y+7	; 0x07
    2a00:	ee 80       	ldd	r14, Y+6	; 0x06
    2a02:	fd 80       	ldd	r15, Y+5	; 0x05
    2a04:	0c 81       	ldd	r16, Y+4	; 0x04
    2a06:	1b 81       	ldd	r17, Y+3	; 0x03
    2a08:	aa 81       	ldd	r26, Y+2	; 0x02
    2a0a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a0c:	ce 0f       	add	r28, r30
    2a0e:	d1 1d       	adc	r29, r1
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	ed 01       	movw	r28, r26
    2a1c:	08 95       	ret

00002a1e <_exit>:
    2a1e:	f8 94       	cli

00002a20 <__stop_program>:
    2a20:	ff cf       	rjmp	.-2      	; 0x2a20 <__stop_program>
